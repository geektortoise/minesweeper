var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.686,1,1.243]],["body/components/AppComponent.html",[0,1.135,1,2.173,2,2.05,3,0.499,4,0.436,5,1.759,6,1.759,7,0.436,8,2.909,9,1.759,10,2.912,11,2.519,12,2.273,13,2.273,14,1.682,15,2.273,16,2.173,17,2.273,18,1.135,19,0.038,20,0.971,21,3.524,22,0.499,23,0.375,24,1.759,25,2.273,26,2.273,27,1.759,28,2.173,29,1.759,30,0.92,31,1.759,32,1.436,33,1.759,34,1.759,35,1.759,36,1.436,37,1.759,38,1.436,39,1.759,40,1.436,41,0.878,42,1.759,43,1.759,44,0.028,45,0.028]],["title/classes/Board.html",[23,0.325,46,1.523]],["body/classes/Board.html",[3,0.447,4,0.39,7,0.39,18,0.787,19,0.038,22,0.447,23,0.336,30,0.638,41,1.274,44,0.026,45,0.026,46,2.386,47,1.756,48,2.607,49,0.285,50,0.953,51,3.9,52,2.301,53,3.948,54,1.056,55,4.219,56,4.219,57,1.166,58,3.011,59,1.469,60,1.234,61,4.238,62,0.87,63,0.544,64,0.787,65,3.158,66,2.987,67,2.659,68,2.659,69,3.158,70,3.158,71,1.056,72,1.713,73,3.158,74,1.756,75,3.158,76,3.158,77,2.607,78,2.607,79,4.783,80,3.158,81,1.565]],["title/interfaces/BoardInput.html",[82,1.373,83,1.523]],["body/interfaces/BoardInput.html",[3,0.464,4,0.405,7,0.405,19,0.038,22,0.801,44,0.027,45,0.027,49,0.296,50,0.977,52,1.475,59,1.631,63,0.575,72,1.098,82,2.193,83,2.431,84,2.047,85,1.635,86,2.885,87,2.589,88,2.885,89,1.635,90,1.635,91,1.823,92,3.086,93,2.416,94,2.416,95,2.416,96,2.416,97,2.416,98,1.955,99,1.475,100,1.475,101,1.823,102,1.635,103,1.823,104,2.416,105,1.475,106,1.475,107,2.047,108,2.047,109,2.168,110,2.047,111,1.475,112,1.635,113,2.047]],["title/classes/ClassicalBoard.html",[23,0.325,114,1.697]],["body/classes/ClassicalBoard.html",[3,0.408,4,0.356,7,0.356,18,0.993,19,0.038,22,0.408,23,0.307,30,0.582,41,1.227,44,0.025,45,0.025,46,2.86,47,1.603,49,0.26,50,0.895,51,3.242,52,1.792,53,3.287,54,0.993,55,3.766,56,3.766,57,1.065,58,2.829,59,1.595,60,1.273,62,0.794,63,0.583,64,0.718,66,1.801,67,1.603,68,1.603,71,0.993,72,1.335,74,1.603,114,2.214,115,3.669,116,2.872,117,2.379,118,3.982,119,5.474,120,4.563,121,3.074,122,3.982,123,2.883,124,1.438,125,1.297,126,1.335,127,2.883,128,5.165,129,2.883,130,2.883,131,2.883,132,2.883,133,2.883,134,2.883,135,2.883,136,2.883,137,2.883]],["title/components/ClassicalBoardComponent.html",[0,0.686,32,1.243]],["body/components/ClassicalBoardComponent.html",[0,0.639,1,0.547,2,1,3,0.19,4,0.166,5,0.67,6,0.67,7,0.166,9,0.67,10,2.179,11,0.67,13,1.109,14,1.22,15,1.109,16,0.547,17,0.67,18,1.089,19,0.038,20,0.37,22,0.19,23,0.143,24,0.67,25,1.109,26,1.109,27,0.67,28,1.346,29,0.67,30,0.74,31,0.67,32,1.346,33,2.179,34,0.67,35,0.67,36,0.547,37,0.67,38,0.547,39,0.67,40,1.346,41,1.263,42,0.67,43,0.67,44,0.014,45,0.014,46,1.968,49,0.121,50,0.5,52,1,54,0.554,57,0.821,59,1.203,60,1.217,62,0.783,63,0.54,64,0.709,66,1.388,67,0.747,68,1.236,71,1.041,72,1.227,74,0.747,81,1.613,89,1.968,90,1.109,98,0.604,99,1,100,1,101,1.236,105,1.487,111,0.604,114,1.581,115,3.875,116,3.054,121,1.776,124,1.649,125,1.487,126,1.227,138,1.109,139,1.579,140,2.347,141,2.843,142,1.776,143,2.843,144,1.236,145,2.222,146,1.236,147,2.222,148,2.487,149,2.843,150,3.661,151,2.843,152,2.02,153,2.596,154,3.304,155,2.222,156,3.304,157,2.728,158,2.222,159,3.304,160,2.728,161,1.579,162,2.347,163,2.601,164,2.347,165,2.222,166,2.843,167,2.843,168,1.835,169,1.109,170,2.064,171,2.222,172,1.236,173,1.343,174,1.343,175,1.343,176,2.967,177,1.343,178,1.343,179,1.343,180,2.222,181,1.343,182,1.457,183,1.343,184,1.343,185,2.222,186,1.343,187,1.343,188,1.343,189,1.343,190,2.179,191,1.343,192,1.343,193,1.343,194,1.343,195,1.343,196,1.343,197,2.347,198,1.343,199,0.67,200,1.343,201,1.343,202,0.747,203,1.109,204,1.109,205,1.343,206,1.343,207,1.343,208,1.343,209,1.343,210,2.222,211,2.222,212,3.304,213,2.843,214,2.843,215,3.661,216,2.222,217,1.343,218,2.222,219,2.348,220,2.222,221,2.222,222,1.343,223,2.222,224,2.222,225,0.954,226,1.343,227,1.343,228,1.343,229,2.222,230,2.222]],["title/injectables/ClassicalBoardService.html",[170,1.906,231,0.928]],["body/injectables/ClassicalBoardService.html",[3,0.215,4,0.188,7,0.188,12,0.759,14,1.145,18,1.043,19,0.039,20,0.419,22,0.215,23,0.162,28,1.002,30,0.927,41,1.449,44,0.015,45,0.015,46,1.777,49,0.137,50,0.553,54,0.613,57,0.562,59,1.516,60,1.065,62,1.264,63,0.505,64,1.143,67,0.846,68,0.846,71,1.098,74,0.846,77,1.256,81,1.145,86,1.723,87,0.759,88,1.723,89,2.643,90,0.759,91,0.846,100,0.685,111,0.685,114,2.867,116,2.821,121,1.537,126,1.476,148,2.288,162,2.939,163,3.764,164,2.031,169,2.031,170,1.537,172,2.767,182,1.694,202,0.846,204,0.759,219,1.081,225,1.081,231,0.748,232,0.759,233,4.016,234,1.256,235,3.099,236,2.461,237,3.099,238,3.099,239,2.461,240,2.461,241,2.461,242,2.461,243,1.521,244,1.521,245,4.184,246,2.461,247,1.521,248,1.521,249,1.521,250,1.521,251,1.521,252,1.521,253,1.521,254,2.461,255,1.521,256,2.461,257,1.521,258,0.846,259,1.256,260,1.521,261,0.846,262,1.521,263,1.521,264,3.099,265,1.081,266,2.461,267,1.521,268,1.521,269,1.256,270,1.521,271,1.521,272,1.521,273,1.521,274,1.521,275,1.521,276,1.521,277,2.461,278,1.521,279,1.521,280,2.461,281,1.256,282,1.081,283,1.521,284,1.521,285,2.031,286,1.521,287,1.521,288,1.521,289,1.256,290,1.521,291,1.521,292,1.521,293,1.521,294,1.521,295,1.521,296,1.081,297,1.521,298,3.099,299,3.099,300,3.561,301,1.521,302,1.521,303,1.521,304,1.256,305,1.521,306,1.521,307,1.521,308,1.521,309,2.461,310,2.461,311,1.521,312,2.461,313,1.521,314,2.031,315,1.521,316,1.521,317,1.521,318,2.461]],["title/injectables/ConfettiService.html",[231,0.928,319,1.906]],["body/injectables/ConfettiService.html",[3,0.465,4,0.406,7,0.406,12,1.64,18,1.085,19,0.038,20,0.906,22,0.465,23,0.35,30,0.664,44,0.027,45,0.027,49,0.297,50,0.979,54,1.085,60,1.097,62,0.906,63,0.464,64,0.819,71,1.085,72,1.741,124,1.64,125,1.48,126,1.102,148,2.435,182,1.607,190,2.172,231,1.323,232,1.64,261,1.828,319,2.719,320,2.713,321,4.879,322,4.352,323,5.194,324,3.287,325,3.287,326,2.713,327,3.287,328,3.287,329,3.593,330,2.713,331,3.048,332,4.352,333,3.287,334,2.336,335,4.352,336,4.352,337,3.287,338,3.287,339,3.287,340,3.287,341,3.287,342,3.287,343,3.287,344,3.287,345,3.287,346,3.287,347,4.352]],["title/components/GameComponent.html",[0,0.686,16,1.243]],["body/components/GameComponent.html",[0,0.648,1,0.558,2,1.016,3,0.194,4,0.169,5,0.683,6,0.683,7,0.169,9,0.683,10,2.196,11,0.683,13,1.127,14,1.366,15,1.127,16,1.362,17,0.683,18,1.171,19,0.039,20,0.377,22,0.194,23,0.146,24,0.683,25,1.127,26,1.127,27,0.683,28,1.362,29,0.683,30,0.747,31,0.683,32,1.622,33,0.683,34,0.683,35,0.683,36,1.362,37,0.683,38,1.362,39,0.683,40,0.558,41,0.341,42,0.683,43,0.683,44,0.014,45,0.014,49,0.124,50,0.508,54,0.563,57,0.834,59,1.381,60,1.145,62,0.794,63,0.513,64,0.718,66,1.8,67,1.859,68,1.859,71,0.922,72,0.757,83,1.438,86,1.603,87,1.438,88,1.603,93,1.859,94,1.256,95,1.256,96,1.256,97,1.256,98,1.505,99,1.297,102,1.127,103,2.537,104,1.256,105,1.297,106,1.792,107,2.311,108,2.089,109,0.683,111,1.895,116,1.256,124,1.987,125,1.792,126,1.121,142,1.8,144,1.256,146,1.256,148,1.438,153,2.342,182,1.366,190,1.846,199,0.683,202,0.761,203,1.13,204,0.683,282,2.992,319,2.089,348,1.13,349,2.258,350,3.699,351,2.379,352,2.258,353,2.258,354,2.882,355,2.882,356,2.882,357,2.882,358,2.882,359,3.344,360,3.344,361,2.258,362,3.344,363,2.258,364,1.369,365,2.342,366,1.369,367,2.258,368,1.369,369,1.369,370,2.258,371,4.211,372,1.369,373,3.699,374,3.344,375,1.369,376,2.258,377,1.369,378,1.864,379,1.369,380,1.369,381,1.369,382,1.13,383,2.258,384,1.369,385,2.258,386,1.369,387,2.379,388,1.369,389,1.369,390,3.982,391,1.369,392,1.369,393,1.369,394,1.13,395,1.369,396,1.13,397,1.13,398,1.369,399,3.344,400,1.369,401,1.369,402,1.369,403,1.369,404,2.882,405,1.369,406,1.369,407,4.211,408,1.13,409,2.258,410,1.369,411,2.258,412,1.369,413,1.369,414,1.369,415,2.882,416,1.369,417,1.369,418,1.369,419,2.258,420,1.864,421,1.369,422,1.369,423,1.369,424,2.258,425,1.369,426,1.369]],["title/components/HistoryComponent.html",[0,0.686,36,1.243]],["body/components/HistoryComponent.html",[0,0.92,1,0.964,2,1.558,3,0.335,4,0.293,5,1.181,6,1.181,7,0.293,9,1.181,10,2.644,11,1.181,13,1.727,14,1.278,15,1.727,16,0.964,17,1.181,18,1.02,19,0.038,20,0.652,22,0.335,23,0.252,24,1.181,25,1.727,26,1.727,27,1.181,28,1.834,29,1.181,30,0.827,31,1.181,32,0.964,33,1.181,34,1.181,35,1.181,36,1.834,37,1.181,38,0.964,39,1.181,40,0.964,41,0.59,42,1.181,43,1.181,44,0.021,45,0.021,49,0.214,50,0.778,52,1.558,54,0.863,57,0.874,60,0.92,62,0.652,63,0.369,64,0.59,71,0.59,100,1.558,101,1.925,103,1.925,104,2.782,112,2.39,126,1.16,139,2.459,140,3.378,142,2.556,144,1.925,146,1.925,157,3.716,182,1.278,199,1.181,282,2.459,296,2.459,334,2.459,351,3.378,365,2.782,396,1.954,427,1.954,428,4.092,429,3.461,430,3.461,431,2.367,432,3.461,433,2.367,434,2.367,435,2.367,436,2.367,437,3.461,438,3.461,439,3.461,440,3.461,441,3.461,442,3.461,443,3.461,444,3.461,445,3.461,446,3.461,447,3.461,448,3.461,449,3.461,450,3.461,451,3.461,452,3.461,453,3.461,454,3.461]],["title/interfaces/NotificationStatus.html",[82,1.373,98,1.373]],["body/interfaces/NotificationStatus.html",[3,0.464,4,0.405,7,0.405,19,0.038,22,0.801,44,0.027,45,0.027,49,0.296,50,0.977,52,2.335,59,1.603,63,0.575,72,1.098,82,2.193,83,2.168,84,2.047,85,1.635,86,1.823,87,1.635,88,1.823,89,1.635,90,1.635,91,1.823,92,3.086,93,2.416,94,2.416,95,2.416,96,2.416,97,2.416,98,2.193,99,2.193,100,2.335,101,2.885,102,1.635,103,1.823,104,2.416,105,1.475,106,1.475,107,2.047,108,2.047,109,2.168,110,2.047,111,1.475,112,1.635,113,2.047]],["title/components/OverlayComponent.html",[0,0.686,38,1.243]],["body/components/OverlayComponent.html",[0,0.96,1,1.038,2,1.644,3,0.361,4,0.315,5,1.272,6,1.272,7,0.315,9,1.272,10,2.698,11,1.272,13,1.822,14,1.349,15,1.822,16,1.038,17,1.272,18,1.162,19,0.038,20,0.702,22,0.361,23,0.272,24,1.272,25,1.822,26,1.822,27,1.272,28,1.898,29,1.272,30,0.862,31,1.272,32,1.038,33,1.272,34,1.272,35,1.272,36,1.898,37,1.272,38,1.898,39,1.272,40,1.038,41,0.635,42,1.272,43,1.272,44,0.022,45,0.022,49,0.23,54,0.91,60,1.109,62,0.702,63,0.389,64,0.635,71,0.91,81,0.941,105,1.644,106,2.31,109,2.561,144,2.031,146,2.031,152,1.811,161,2.595,168,3.015,176,1.811,182,1.349,190,1.272,197,2.104,199,1.272,202,1.417,378,4.072,382,2.104,387,3.015,397,2.104,455,2.104,456,3.652,457,4.268,458,3.652,459,3.652,460,3.652,461,3.652,462,3.652,463,2.549,464,2.549,465,2.549,466,4.661,467,3.652,468,3.652,469,3.652,470,2.549,471,2.549,472,2.549,473,2.549,474,2.549,475,2.549,476,2.549,477,2.549,478,2.549,479,3.652]],["title/interfaces/OverlayData.html",[82,1.373,106,1.373]],["body/interfaces/OverlayData.html",[3,0.471,4,0.411,7,0.411,19,0.038,22,0.804,44,0.027,45,0.027,49,0.3,50,0.986,52,1.497,59,1.495,63,0.556,64,1.093,72,1.645,82,2.209,83,2.189,84,2.078,85,1.66,86,1.85,87,1.66,88,1.85,89,1.66,90,1.66,91,1.85,92,3.116,93,2.439,94,2.439,95,2.439,96,2.439,97,2.439,98,1.974,99,1.497,100,1.497,101,1.85,102,1.66,103,1.85,104,2.439,105,1.497,106,1.974,107,3.259,108,3.259,109,2.604,110,2.078,111,1.497,112,1.66,113,2.078]],["title/injectables/StorageService.html",[231,0.928,365,1.697]],["body/injectables/StorageService.html",[3,0.435,4,0.38,7,0.38,12,1.533,18,1.037,19,0.039,20,0.846,22,0.435,23,0.327,30,0.84,44,0.026,45,0.026,49,0.277,54,1.037,60,1.06,62,1.146,63,0.443,64,1.037,71,1.175,81,1.742,99,2.549,102,2.522,112,2.522,148,2.353,182,1.536,202,1.708,231,1.265,232,1.533,261,1.708,296,2.955,331,1.919,365,2.313,408,2.535,480,2.182,481,5.054,482,4.159,483,4.159,484,3.072,485,2.955,486,5.444,487,3.072,488,4.159,489,3.072,490,2.535,491,4.159,492,4.159,493,3.072,494,3.072,495,3.072,496,4.159,497,3.072,498,3.072,499,3.072]],["title/classes/Tile.html",[23,0.325,41,0.761]],["body/classes/Tile.html",[3,0.435,4,0.38,7,0.38,19,0.038,22,0.435,23,0.327,30,0.621,41,1.412,44,0.026,45,0.026,47,1.708,49,0.277,50,0.935,51,3.868,54,1.037,57,1.134,58,2.955,59,1.534,60,1.252,62,0.846,63,0.58,64,0.766,71,0.766,72,1.924,78,2.535,81,1.134,87,2.075,100,1.382,190,2.075,289,2.535,304,3.893,500,2.535,501,4.716,502,5.567,503,4.716,504,5.054,505,4.159,506,3.072,507,3.072,508,3.072,509,3.072,510,3.072,511,4.716,512,3.072,513,3.072,514,3.072,515,3.072,516,3.072,517,3.072,518,3.072,519,3.072]],["title/components/TileComponent.html",[0,0.686,40,1.243]],["body/components/TileComponent.html",[0,1.066,1,1.265,2,1.886,3,0.44,4,0.384,5,1.55,6,1.55,7,0.384,9,1.55,10,2.833,11,1.55,13,2.091,14,1.548,15,2.091,16,1.265,17,1.55,18,1.182,19,0.038,20,0.856,22,0.44,23,0.331,24,1.55,25,2.091,26,2.091,27,1.55,28,2.068,29,1.55,30,0.847,31,1.55,32,1.265,33,1.55,34,1.55,35,1.55,36,1.265,37,1.55,38,1.265,39,1.55,40,2.068,41,1.449,42,1.55,43,1.55,44,0.026,45,0.026,49,0.28,60,0.698,63,0.331,105,1.886,126,1.404,142,2.962,144,2.33,146,2.33,161,2.977,199,1.55,265,3.607,520,2.564,521,4.19,522,4.19,523,3.106]],["title/injectables/TileService.html",[172,1.697,231,0.928]],["body/injectables/TileService.html",[3,0.42,4,0.367,7,0.367,12,1.48,14,1.5,18,1.154,19,0.038,20,0.817,22,0.42,23,0.316,28,1.208,30,0.936,41,1.451,44,0.025,45,0.025,49,0.268,54,1.012,57,1.711,59,1.438,60,1.12,62,1.276,63,0.493,64,1.154,71,1.154,74,1.649,81,1.84,121,2.893,126,1.552,163,3.291,172,2.258,182,1.095,219,2.107,225,2.886,231,1.235,232,1.48,258,1.649,259,2.448,261,1.649,265,2.107,269,2.448,281,3.353,285,2.448,314,2.448,524,2.448,525,4.061,526,4.061,527,2.966,528,2.966,529,2.966,530,4.061,531,2.966,532,4.061,533,4.061,534,2.966,535,4.061,536,2.966,537,2.966,538,2.966,539,4.061]],["title/injectables/TimerService.html",[153,1.697,231,0.928]],["body/injectables/TimerService.html",[3,0.409,4,0.357,7,0.357,12,1.442,14,1.067,18,0.72,19,0.038,20,0.796,22,0.409,23,0.308,44,0.025,45,0.025,49,0.261,50,0.897,54,0.994,57,1.687,59,1.099,60,1.255,63,0.487,71,1.139,72,1.337,81,1.067,124,2.28,125,2.056,126,1.531,148,2.667,152,3.246,153,2.218,160,4.067,176,3.246,182,1.687,190,2.28,204,1.991,231,1.213,232,1.442,261,1.607,326,4.067,331,1.805,334,2.053,540,2.386,541,4.569,542,3.771,543,4.569,544,4.569,545,4.926,546,3.989,547,2.89,548,2.89,549,2.89,550,2.89,551,2.89,552,2.89,553,4.926,554,3.989,555,3.989,556,2.89,557,2.89,558,3.989,559,2.89]],["title/classes/Util.html",[23,0.325,258,1.697]],["body/classes/Util.html",[3,0.536,4,0.468,7,0.468,19,0.038,22,0.536,23,0.403,30,0.765,44,0.029,45,0.029,47,2.105,49,0.342,54,1.188,59,1.631,60,0.851,62,1.043,63,0.403,64,0.944,71,0.944,81,1.398,258,2.651,331,2.978,560,3.125,561,5.219,562,4.768,563,4.768,564,5.219,565,3.785,566,3.785,567,5.219,568,3.785,569,4.768,570,3.785,571,3.785,572,3.785,573,3.785,574,3.785,575,3.785]],["title/coverage.html",[576,3.418]],["body/coverage.html",[0,1.222,1,1.244,7,0.378,8,2.522,16,1.244,19,0.038,23,0.537,32,1.244,36,1.244,38,1.244,40,1.244,41,0.761,44,0.026,45,0.026,46,1.524,48,2.522,63,0.325,82,2.117,83,1.524,85,2.346,98,1.375,106,1.375,114,1.699,115,2.944,116,2.615,117,2.522,126,2.045,138,2.522,153,1.699,170,1.908,172,1.699,204,1.524,231,1.603,233,2.522,234,2.522,258,1.699,319,1.908,320,2.522,348,2.522,365,1.699,427,2.522,455,2.522,480,2.944,485,2.17,500,2.522,520,2.522,524,2.522,540,2.522,560,2.522,576,2.522,577,3.055,578,3.055,579,3.055,580,4.702,581,2.522,582,4.144,583,2.522,584,3.055,585,3.055,586,4.144,587,3.055,588,5.271,589,4.144,590,3.055,591,4.144,592,3.055,593,3.055,594,3.055,595,3.055]],["title/dependencies.html",[596,1.819,597,3.024]],["body/dependencies.html",[19,0.038,20,1.118,44,0.031,45,0.031,199,2.025,329,3.35,330,3.35,394,3.35,597,3.35,598,4.059,599,5.999,600,4.059,601,4.979,602,4.979,603,4.059,604,4.059,605,4.059,606,4.059,607,4.059,608,4.059,609,4.059,610,4.059,611,4.059,612,4.059,613,4.059]],["title/miscellaneous/enumerations.html",[614,1.277,615,3.024]],["body/miscellaneous/enumerations.html",[19,0.037,44,0.031,45,0.031,49,0.38,85,2.101,93,2.831,94,2.831,95,2.831,96,2.831,97,2.831,109,2.541,110,2.63,111,1.895,112,2.101,113,2.63,125,2.663,614,2.101,615,3.476,616,4.203]],["title/index.html",[49,0.231,617,2.56,618,2.56]],["body/index.html",[0,1.108,4,0.415,19,0.027,30,0.678,44,0.027,45,0.027,139,2.384,204,1.675,542,3.642,596,2.384,619,3.356,620,4.412,621,3.356,622,4.929,623,4.929,624,2.77,625,3.356,626,3.356,627,4.412,628,5.439,629,5.692,630,3.356,631,3.356,632,3.356,633,3.356,634,3.356,635,3.356,636,3.356,637,3.356,638,3.356,639,3.356,640,3.356,641,4.929,642,4.929,643,3.356,644,5.236,645,3.356,646,3.356,647,3.356,648,3.356,649,4.412,650,5.236,651,3.356,652,4.412,653,4.412,654,3.356,655,5.584,656,3.356,657,3.356,658,3.356,659,4.412,660,3.356,661,3.356,662,3.356,663,3.356,664,3.356,665,3.356,666,4.929,667,3.356,668,3.356,669,3.356,670,3.356,671,2.384,672,3.356,673,3.356]],["title/modules.html",[674,3.418]],["body/modules.html",[19,0.034,44,0.034,45,0.034,674,3.966]],["title/overview.html",[671,2.942]],["body/overview.html",[2,2.091,19,0.033,44,0.033,45,0.033,47,2.583,84,2.902,232,2.318,420,3.835,671,3.301,675,4.646,676,4.646,677,4.646]],["title/properties.html",[50,0.824,596,1.819]],["body/properties.html",[19,0.035,44,0.034,45,0.034,50,1.067,624,3.916,678,4.744]],["title/miscellaneous/typealiases.html",[614,1.277,679,3.664]],["body/miscellaneous/typealiases.html",[19,0.035,44,0.033,45,0.033,49,0.411,63,0.485,85,2.271,89,2.661,90,2.271,91,2.531,102,2.661,614,2.271,616,4.402,680,4.552]],["title/miscellaneous/variables.html",[614,1.277,681,3.024]],["body/miscellaneous/variables.html",[19,0.037,44,0.032,45,0.032,49,0.389,63,0.55,99,1.939,124,2.576,125,2.323,480,3.061,485,3.667,490,3.556,581,3.556,583,4.261,614,2.149,681,3.556,682,4.308,683,4.308,684,4.308,685,4.308,686,4.308]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":126,"title":{},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":678,"title":{},"body":{"properties.html":{}}}],["0.14.10",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":111,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["1000",{"_index":334,"title":{},"body":{"injectables/ConfettiService.html":{},"components/HistoryComponent.html":{},"injectables/TimerService.html":{}}}],["15",{"_index":333,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["17.3.6",{"_index":625,"title":{},"body":{"index.html":{}}}],["18.2.2",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":113,"title":{},"body":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["2.12.0",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["2.3.0",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":339,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["3",{"_index":420,"title":{},"body":{"components/GameComponent.html":{},"overview.html":{}}}],["360",{"_index":341,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["4",{"_index":677,"title":{},"body":{"overview.html":{}}}],["4.1.1",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":676,"title":{},"body":{"overview.html":{}}}],["6",{"_index":675,"title":{},"body":{"overview.html":{}}}],["60",{"_index":343,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["7.8.0",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["abstract",{"_index":75,"title":{},"body":{"classes/Board.html":{}}}],["accessors",{"_index":168,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/OverlayComponent.html":{}}}],["actual_component",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["add",{"_index":662,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":680,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":622,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":199,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":394,"title":{},"body":{"components/GameComponent.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":601,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":604,"title":{},"body":{"dependencies.html":{}}}],["animate.css",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["animationend",{"_index":335,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["app",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":583,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":634,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arguments",{"_index":464,"title":{},"body":{"components/OverlayComponent.html":{}}}],["array",{"_index":296,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"components/HistoryComponent.html":{},"injectables/StorageService.html":{}}}],["array(record",{"_index":494,"title":{},"body":{"injectables/StorageService.html":{}}}],["artifacts",{"_index":645,"title":{},"body":{"index.html":{}}}],["assignmines",{"_index":525,"title":{},"body":{"injectables/TileService.html":{}}}],["assignmines(tiles",{"_index":528,"title":{},"body":{"injectables/TileService.html":{}}}],["assignminesaroundtile",{"_index":235,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["assignminesaroundtile(tileboard",{"_index":243,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["async",{"_index":230,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["asyncpipe",{"_index":143,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["at_first_click",{"_index":90,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/typealiases.html":{}}}],["automatically",{"_index":635,"title":{},"body":{"index.html":{}}}],["before_starting",{"_index":91,"title":{},"body":{"interfaces/BoardInput.html":{},"injectables/ClassicalBoardService.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/typealiases.html":{}}}],["beginner",{"_index":94,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["board",{"_index":46,"title":{"classes/Board.html":{}},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"coverage.html":{}}}],["board'},{'name",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["board.component",{"_index":393,"title":{},"body":{"components/GameComponent.html":{}}}],["board.component.css",{"_index":147,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.html",{"_index":145,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts",{"_index":138,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"coverage.html":{}}}],["board.component.ts:101",{"_index":179,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:107",{"_index":187,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:111",{"_index":196,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:18",{"_index":175,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:19",{"_index":173,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:20",{"_index":174,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:21",{"_index":177,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:23",{"_index":178,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:24",{"_index":189,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:25",{"_index":192,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:26",{"_index":193,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:27",{"_index":191,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:28",{"_index":171,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:32",{"_index":194,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:35",{"_index":184,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:39",{"_index":183,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:52",{"_index":181,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:80",{"_index":186,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.component.ts:90",{"_index":188,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.service",{"_index":201,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["board.service.ts",{"_index":234,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"coverage.html":{}}}],["board.service.ts:105",{"_index":249,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:116",{"_index":244,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:12",{"_index":242,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:18",{"_index":255,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:39",{"_index":257,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:46",{"_index":247,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:55",{"_index":251,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.service.ts:92",{"_index":253,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.status",{"_index":280,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.tileset",{"_index":283,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.tileset.filter((tile",{"_index":287,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["board.ts",{"_index":117,"title":{},"body":{"classes/ClassicalBoard.html":{},"coverage.html":{}}}],["board.ts:6",{"_index":127,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board.ts:7",{"_index":123,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board.ts:8",{"_index":122,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board/classical",{"_index":116,"title":{},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"coverage.html":{}}}],["board:16",{"_index":132,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board:20",{"_index":133,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board:5",{"_index":129,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board:7",{"_index":130,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["board:9",{"_index":131,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["boardinput",{"_index":83,"title":{"interfaces/BoardInput.html":{}},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"coverage.html":{}}}],["boardsize",{"_index":309,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["boolean",{"_index":72,"title":{},"body":{"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"classes/Tile.html":{},"injectables/TimerService.html":{}}}],["browser",{"_index":602,"title":{},"body":{"dependencies.html":{}}}],["build",{"_index":644,"title":{},"body":{"index.html":{}}}],["capabilities",{"_index":664,"title":{},"body":{"index.html":{}}}],["change",{"_index":637,"title":{},"body":{"index.html":{}}}],["check",{"_index":669,"title":{},"body":{"index.html":{}}}],["checkvictory",{"_index":236,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["checkvictory(board",{"_index":246,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["choice",{"_index":658,"title":{},"body":{"index.html":{}}}],["class",{"_index":23,"title":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"classes/Tile.html":{},"classes/Util.html":{}},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"coverage.html":{}}}],["class=\"container",{"_index":438,"title":{},"body":{"components/HistoryComponent.html":{}}}],["classes",{"_index":47,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"classes/Tile.html":{},"classes/Util.html":{},"overview.html":{}}}],["classical",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["classicalboard",{"_index":114,"title":{"classes/ClassicalBoard.html":{}},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"coverage.html":{}}}],["classicalboard(1",{"_index":291,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["classicalboardcomponent",{"_index":32,"title":{"components/ClassicalBoardComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{}}}],["classicalboardservice",{"_index":170,"title":{"injectables/ClassicalBoardService.html":{}},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"coverage.html":{}}}],["clear",{"_index":545,"title":{},"body":{"injectables/TimerService.html":{}}}],["clearinterval(this.timerref",{"_index":558,"title":{},"body":{"injectables/TimerService.html":{}}}],["cli",{"_index":623,"title":{},"body":{"index.html":{}}}],["code",{"_index":639,"title":{},"body":{"index.html":{}}}],["column",{"_index":86,"title":{},"body":{"interfaces/BoardInput.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["columns",{"_index":371,"title":{},"body":{"components/GameComponent.html":{}}}],["columnsnumber",{"_index":162,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{}}}],["command",{"_index":659,"title":{},"body":{"index.html":{}}}],["commonmodule",{"_index":457,"title":{},"body":{"components/OverlayComponent.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"overview.html":{}}}],["confetti",{"_index":329,"title":{},"body":{"injectables/ConfettiService.html":{},"dependencies.html":{}}}],["confettis",{"_index":321,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["confettiservice",{"_index":319,"title":{"injectables/ConfettiService.html":{}},"body":{"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"coverage.html":{}}}],["conffetiservice",{"_index":367,"title":{},"body":{"components/GameComponent.html":{}}}],["const",{"_index":331,"title":{},"body":{"injectables/ConfettiService.html":{},"injectables/StorageService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["constructor",{"_index":57,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}}}],["constructor(conffetiservice",{"_index":364,"title":{},"body":{"components/GameComponent.html":{}}}],["constructor(id",{"_index":58,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"classes/Tile.html":{}}}],["constructor(private",{"_index":434,"title":{},"body":{"components/HistoryComponent.html":{}}}],["constructor(storageservice",{"_index":431,"title":{},"body":{"components/HistoryComponent.html":{}}}],["constructor(tileservice",{"_index":169,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{}}}],["content",{"_index":108,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["continue",{"_index":299,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["counter",{"_index":541,"title":{},"body":{"injectables/TimerService.html":{}}}],["coverage",{"_index":576,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["current",{"_index":76,"title":{},"body":{"classes/Board.html":{}}}],["custom",{"_index":97,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["customgame",{"_index":359,"title":{},"body":{"components/GameComponent.html":{}}}],["d",{"_index":449,"title":{},"body":{"components/HistoryComponent.html":{}}}],["date",{"_index":104,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["date.now",{"_index":336,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["datepipe",{"_index":351,"title":{},"body":{"components/GameComponent.html":{},"components/HistoryComponent.html":{}}}],["decorators",{"_index":382,"title":{},"body":{"components/GameComponent.html":{},"components/OverlayComponent.html":{}}}],["default",{"_index":124,"title":{},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"injectables/TimerService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":337,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["defined",{"_index":60,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["dependencies",{"_index":597,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dev",{"_index":631,"title":{},"body":{"index.html":{}}}],["development",{"_index":626,"title":{},"body":{"index.html":{}}}],["dimensional",{"_index":295,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["directive",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["directives",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":643,"title":{},"body":{"index.html":{}}}],["directory",{"_index":648,"title":{},"body":{"index.html":{}}}],["display",{"_index":107,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["displayinputs",{"_index":354,"title":{},"body":{"components/GameComponent.html":{}}}],["dist",{"_index":647,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["duration",{"_index":332,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["dynamic",{"_index":603,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":656,"title":{},"body":{"index.html":{}}}],["element",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["elseblock",{"_index":437,"title":{},"body":{"components/HistoryComponent.html":{}}}],["emitandschedule",{"_index":554,"title":{},"body":{"injectables/TimerService.html":{}}}],["end",{"_index":655,"title":{},"body":{"index.html":{}}}],["enum",{"_index":92,"title":{},"body":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["enumerations",{"_index":615,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["escape",{"_index":475,"title":{},"body":{"components/OverlayComponent.html":{}}}],["evaluatedtile",{"_index":315,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["evaluatedtile.ismine",{"_index":318,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["event",{"_index":378,"title":{},"body":{"components/GameComponent.html":{},"components/OverlayComponent.html":{}}}],["event.key",{"_index":474,"title":{},"body":{"components/OverlayComponent.html":{}}}],["event.status",{"_index":407,"title":{},"body":{"components/GameComponent.html":{}}}],["eventemitter",{"_index":176,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/OverlayComponent.html":{},"injectables/TimerService.html":{}}}],["exclusive",{"_index":573,"title":{},"body":{"classes/Util.html":{}}}],["execute",{"_index":652,"title":{},"body":{"index.html":{}}}],["expert",{"_index":96,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["explosion",{"_index":110,"title":{},"body":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["export",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["extends",{"_index":118,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["false",{"_index":190,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/OverlayComponent.html":{},"classes/Tile.html":{},"injectables/TimerService.html":{}}}],["file",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"coverage.html":{}}}],["files",{"_index":638,"title":{},"body":{"index.html":{}}}],["filter((n",{"_index":270,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["filter((tile",{"_index":284,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["finishinitialization",{"_index":237,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["finishinitialization(tileboard",{"_index":248,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["first",{"_index":661,"title":{},"body":{"index.html":{}}}],["firsttilerevealed",{"_index":149,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["flagged",{"_index":100,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"classes/Tile.html":{}}}],["flaggedmines",{"_index":266,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["flagsnumber",{"_index":150,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["foreach((n",{"_index":273,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["foreach((tile",{"_index":286,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["formsmodule",{"_index":350,"title":{},"body":{"components/GameComponent.html":{}}}],["further",{"_index":665,"title":{},"body":{"index.html":{}}}],["game",{"_index":349,"title":{},"body":{"components/GameComponent.html":{}}}],["game'},{'name",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["game.component.css",{"_index":353,"title":{},"body":{"components/GameComponent.html":{}}}],["game.component.html",{"_index":352,"title":{},"body":{"components/GameComponent.html":{}}}],["game/game.component",{"_index":21,"title":{},"body":{"components/AppComponent.html":{}}}],["game_history",{"_index":490,"title":{},"body":{"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["gamecomponent",{"_index":16,"title":{"components/GameComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{}}}],["gamemode",{"_index":93,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["gamemode.beginner",{"_index":385,"title":{},"body":{"components/GameComponent.html":{}}}],["gamemode.custom",{"_index":409,"title":{},"body":{"components/GameComponent.html":{}}}],["gameover",{"_index":67,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{}}}],["generate",{"_index":641,"title":{},"body":{"index.html":{}}}],["generated",{"_index":621,"title":{},"body":{"index.html":{}}}],["generatetileboard",{"_index":238,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["generatetileboard(rowsnumber",{"_index":250,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["generatetiles",{"_index":526,"title":{},"body":{"injectables/TileService.html":{}}}],["generatetiles(tilesnumber",{"_index":530,"title":{},"body":{"injectables/TileService.html":{}}}],["generationstrategy",{"_index":89,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/typealiases.html":{}}}],["get(key",{"_index":483,"title":{},"body":{"injectables/StorageService.html":{}}}],["getgamestatus",{"_index":154,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["gethistory",{"_index":481,"title":{},"body":{"injectables/StorageService.html":{}}}],["getneighbors",{"_index":239,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["getneighbors(tileboard",{"_index":252,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["getoverlaycontent",{"_index":471,"title":{},"body":{"components/OverlayComponent.html":{}}}],["getrandomint",{"_index":562,"title":{},"body":{"classes/Util.html":{}}}],["getrandomint(min",{"_index":563,"title":{},"body":{"classes/Util.html":{}}}],["getthreatcount",{"_index":504,"title":{},"body":{"classes/Tile.html":{}}}],["gettiles",{"_index":195,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["getting",{"_index":617,"title":{"index.html":{}},"body":{}}],["go",{"_index":668,"title":{},"body":{"index.html":{}}}],["handletileclick",{"_index":155,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["handletileclick(tile",{"_index":180,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["hasstarted",{"_index":151,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["help",{"_index":666,"title":{},"body":{"index.html":{}}}],["hh:mm:ss",{"_index":452,"title":{},"body":{"components/HistoryComponent.html":{}}}],["history",{"_index":112,"title":{},"body":{"interfaces/BoardInput.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"miscellaneous/enumerations.html":{}}}],["history'},{'name",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["history.component.css",{"_index":430,"title":{},"body":{"components/HistoryComponent.html":{}}}],["history.component.html",{"_index":429,"title":{},"body":{"components/HistoryComponent.html":{}}}],["history/history.component",{"_index":397,"title":{},"body":{"components/GameComponent.html":{},"components/OverlayComponent.html":{}}}],["historyasarray",{"_index":495,"title":{},"body":{"injectables/StorageService.html":{}}}],["historyasarray.unshift(record",{"_index":497,"title":{},"body":{"injectables/StorageService.html":{}}}],["historycomponent",{"_index":36,"title":{"components/HistoryComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{}}}],["historyrecord",{"_index":102,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"miscellaneous/typealiases.html":{}}}],["hostlistener",{"_index":473,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hostlistener('window:keyup",{"_index":469,"title":{},"body":{"components/OverlayComponent.html":{}}}],["hostlisteners",{"_index":461,"title":{},"body":{"components/OverlayComponent.html":{}}}],["html",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["http://localhost:4200",{"_index":633,"title":{},"body":{"index.html":{}}}],["i][column",{"_index":303,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["id",{"_index":51,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"classes/Tile.html":{}}}],["identifier",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["idxmine",{"_index":538,"title":{},"body":{"injectables/TileService.html":{}}}],["implements",{"_index":139,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/HistoryComponent.html":{},"index.html":{}}}],["import",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}}}],["imports",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["inclusive",{"_index":575,"title":{},"body":{"classes/Util.html":{}}}],["index",{"_index":49,"title":{"index.html":{}},"body":{"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["information",{"_index":453,"title":{},"body":{"components/HistoryComponent.html":{}}}],["inherited",{"_index":128,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["initializeboard",{"_index":156,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["injectable",{"_index":231,"title":{"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"injectables/StorageService.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}},"body":{"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"injectables/StorageService.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"coverage.html":{}}}],["injectables",{"_index":232,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"injectables/StorageService.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"overview.html":{}}}],["input",{"_index":105,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"components/TileComponent.html":{}}}],["inputs",{"_index":161,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["insert",{"_index":482,"title":{},"body":{"injectables/StorageService.html":{}}}],["insert(record",{"_index":488,"title":{},"body":{"injectables/StorageService.html":{}}}],["interface",{"_index":82,"title":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}},"body":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"coverage.html":{}}}],["interfaces",{"_index":84,"title":{},"body":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"overview.html":{}}}],["intermediate",{"_index":95,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["interval",{"_index":345,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["isflagged",{"_index":501,"title":{},"body":{"classes/Tile.html":{}}}],["isgameover",{"_index":55,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{}}}],["isitpossible",{"_index":312,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["ismine",{"_index":502,"title":{},"body":{"classes/Tile.html":{}}}],["isrevealed",{"_index":503,"title":{},"body":{"classes/Tile.html":{}}}],["iswon",{"_index":56,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{}}}],["item.date",{"_index":448,"title":{},"body":{"components/HistoryComponent.html":{}}}],["item.flagged",{"_index":447,"title":{},"body":{"components/HistoryComponent.html":{}}}],["item.input.column",{"_index":444,"title":{},"body":{"components/HistoryComponent.html":{}}}],["item.input.row",{"_index":442,"title":{},"body":{"components/HistoryComponent.html":{}}}],["item.mode",{"_index":441,"title":{},"body":{"components/HistoryComponent.html":{}}}],["item.status",{"_index":440,"title":{},"body":{"components/HistoryComponent.html":{}}}],["item.time",{"_index":445,"title":{},"body":{"components/HistoryComponent.html":{}}}],["j",{"_index":300,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["json.parse(history",{"_index":496,"title":{},"body":{"injectables/StorageService.html":{}}}],["json.stringify(historyasarray",{"_index":498,"title":{},"body":{"injectables/StorageService.html":{}}}],["json.stringify(new",{"_index":493,"title":{},"body":{"injectables/StorageService.html":{}}}],["karma",{"_index":654,"title":{},"body":{"index.html":{}}}],["key",{"_index":485,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keyboardevent",{"_index":466,"title":{},"body":{"components/OverlayComponent.html":{}}}],["keyevent",{"_index":460,"title":{},"body":{"components/OverlayComponent.html":{}}}],["keyevent(event",{"_index":468,"title":{},"body":{"components/OverlayComponent.html":{}}}],["legend",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["localstorage.getitem(key",{"_index":499,"title":{},"body":{"injectables/StorageService.html":{}}}],["localstorage.setitem(key",{"_index":492,"title":{},"body":{"injectables/StorageService.html":{}}}],["lost",{"_index":226,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["matching",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(min",{"_index":568,"title":{},"body":{"classes/Util.html":{}}}],["math.floor(math.random",{"_index":571,"title":{},"body":{"classes/Util.html":{}}}],["math.floor(max",{"_index":570,"title":{},"body":{"classes/Util.html":{}}}],["math.min(boardsize",{"_index":311,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["max",{"_index":564,"title":{},"body":{"classes/Util.html":{}}}],["maxfloored",{"_index":569,"title":{},"body":{"classes/Util.html":{}}}],["maximum",{"_index":572,"title":{},"body":{"classes/Util.html":{}}}],["maxmines",{"_index":355,"title":{},"body":{"components/GameComponent.html":{}}}],["metadata",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["methods",{"_index":54,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["min",{"_index":566,"title":{},"body":{"classes/Util.html":{}}}],["minceiled",{"_index":567,"title":{},"body":{"classes/Util.html":{}}}],["mine",{"_index":87,"title":{},"body":{"interfaces/BoardInput.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"classes/Tile.html":{}}}],["mines",{"_index":282,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{}}}],["minesnumber",{"_index":163,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["minesweeper",{"_index":356,"title":{},"body":{"components/GameComponent.html":{}}}],["minesweepergeektortoise",{"_index":619,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":574,"title":{},"body":{"classes/Util.html":{}}}],["miscellaneous",{"_index":614,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mm:ss",{"_index":446,"title":{},"body":{"components/HistoryComponent.html":{}}}],["mmm",{"_index":450,"title":{},"body":{"components/HistoryComponent.html":{}}}],["mode",{"_index":103,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["modules",{"_index":674,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":667,"title":{},"body":{"index.html":{}}}],["n",{"_index":275,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["n.isflagged",{"_index":272,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["n.isflagged).length",{"_index":268,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["n.isrevealed",{"_index":271,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["name",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"classes/Util.html":{},"index.html":{}}}],["navigate",{"_index":632,"title":{},"body":{"index.html":{}}}],["need",{"_index":660,"title":{},"body":{"index.html":{}}}],["neighboorhood",{"_index":513,"title":{},"body":{"classes/Tile.html":{}}}],["neighbor",{"_index":536,"title":{},"body":{"injectables/TileService.html":{}}}],["neighbors",{"_index":304,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"classes/Tile.html":{}}}],["neighbors.push(tileboard[row",{"_index":302,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["new",{"_index":204,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"injectables/TimerService.html":{},"coverage.html":{},"index.html":{}}}],["ng",{"_index":629,"title":{},"body":{"index.html":{}}}],["ngfor",{"_index":428,"title":{},"body":{"components/HistoryComponent.html":{}}}],["ngforof",{"_index":141,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["ngif",{"_index":142,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/TileComponent.html":{}}}],["ngoninit",{"_index":157,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/HistoryComponent.html":{}}}],["notificationstatus",{"_index":98,"title":{"interfaces/NotificationStatus.html":{}},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"coverage.html":{}}}],["notifygamestatus",{"_index":166,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["null",{"_index":486,"title":{},"body":{"injectables/StorageService.html":{}}}],["number",{"_index":59,"title":{},"body":{"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["numberofminesleft",{"_index":119,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["numberofunrevealedtiles",{"_index":120,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["ongoing",{"_index":66,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{}}}],["oninit",{"_index":140,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/HistoryComponent.html":{}}}],["onrightclick",{"_index":158,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["onrightclick(tile",{"_index":185,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["optional",{"_index":64,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"classes/Util.html":{}}}],["out",{"_index":670,"title":{},"body":{"index.html":{}}}],["output",{"_index":197,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/OverlayComponent.html":{}}}],["outputs",{"_index":165,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["overlay",{"_index":456,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay'},{'name",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["overlay.component.css",{"_index":459,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay.component.html",{"_index":458,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overlay/overlay.component",{"_index":398,"title":{},"body":{"components/GameComponent.html":{}}}],["overlaycomponent",{"_index":38,"title":{"components/OverlayComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{}}}],["overlaycontent",{"_index":109,"title":{},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"miscellaneous/enumerations.html":{}}}],["overlaycontent.explosion",{"_index":416,"title":{},"body":{"components/GameComponent.html":{}}}],["overlaycontent.history",{"_index":387,"title":{},"body":{"components/GameComponent.html":{},"components/OverlayComponent.html":{}}}],["overlaydata",{"_index":106,"title":{"interfaces/OverlayData.html":{}},"body":{"interfaces/BoardInput.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"coverage.html":{}}}],["overlaydata.content",{"_index":479,"title":{},"body":{"components/OverlayComponent.html":{}}}],["overview",{"_index":671,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":596,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["page",{"_index":673,"title":{},"body":{"index.html":{}}}],["parameters",{"_index":62,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"classes/Util.html":{}}}],["platform",{"_index":657,"title":{},"body":{"index.html":{}}}],["play",{"_index":227,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["player",{"_index":512,"title":{},"body":{"classes/Tile.html":{}}}],["playing",{"_index":439,"title":{},"body":{"components/HistoryComponent.html":{}}}],["playingtime",{"_index":357,"title":{},"body":{"components/GameComponent.html":{}}}],["private",{"_index":148,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"injectables/StorageService.html":{},"injectables/TimerService.html":{}}}],["project",{"_index":620,"title":{},"body":{"index.html":{}}}],["properties",{"_index":50,"title":{"properties.html":{}},"body":{"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"classes/Tile.html":{},"injectables/TimerService.html":{},"properties.html":{}}}],["providedin",{"_index":261,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"injectables/StorageService.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}}}],["providerouter(routes",{"_index":686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":152,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/OverlayComponent.html":{},"injectables/TimerService.html":{}}}],["record",{"_index":408,"title":{},"body":{"components/GameComponent.html":{},"injectables/StorageService.html":{}}}],["record.input",{"_index":410,"title":{},"body":{"components/GameComponent.html":{}}}],["reference",{"_index":672,"title":{},"body":{"index.html":{}}}],["reload",{"_index":636,"title":{},"body":{"index.html":{}}}],["representation",{"_index":134,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["restartgame",{"_index":159,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["restartgameevent",{"_index":167,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["result",{"_index":358,"title":{},"body":{"components/GameComponent.html":{}}}],["results",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":81,"title":{},"body":{"classes/Board.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{}}}],["reveal",{"_index":281,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["reveal(tile",{"_index":533,"title":{},"body":{"injectables/TileService.html":{}}}],["revealed",{"_index":289,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"classes/Tile.html":{}}}],["revealtile",{"_index":240,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["revealtile(board",{"_index":254,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["root",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"injectables/StorageService.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}}}],["root'},{'name",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["row",{"_index":88,"title":{},"body":{"interfaces/BoardInput.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["rows",{"_index":373,"title":{},"body":{"components/GameComponent.html":{}}}],["rowsnumber",{"_index":164,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{}}}],["run",{"_index":628,"title":{},"body":{"index.html":{}}}],["running",{"_index":542,"title":{},"body":{"injectables/TimerService.html":{},"index.html":{}}}],["rxjs",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["scaffolding",{"_index":640,"title":{},"body":{"index.html":{}}}],["selector",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["serve",{"_index":630,"title":{},"body":{"index.html":{}}}],["server",{"_index":627,"title":{},"body":{"index.html":{}}}],["service/classical",{"_index":200,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["service/confetti/confetti.service",{"_index":395,"title":{},"body":{"components/GameComponent.html":{}}}],["service/storage/storage.service",{"_index":396,"title":{},"body":{"components/GameComponent.html":{},"components/HistoryComponent.html":{}}}],["service/timer/timer.service",{"_index":203,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{}}}],["set",{"_index":77,"title":{},"body":{"classes/Board.html":{},"injectables/ClassicalBoardService.html":{}}}],["setgameover",{"_index":241,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["setgameover(board",{"_index":256,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["setinterval",{"_index":346,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["settimeout(emitandschedule",{"_index":557,"title":{},"body":{"injectables/TimerService.html":{}}}],["settings",{"_index":360,"title":{},"body":{"components/GameComponent.html":{}}}],["show",{"_index":454,"title":{},"body":{"components/HistoryComponent.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"index.html":{}}}],["spread",{"_index":340,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["src/.../app.config.ts",{"_index":682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.service.ts",{"_index":683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":616,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/app.component.ts",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.config.ts",{"_index":581,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/board/board.ts",{"_index":48,"title":{},"body":{"classes/Board.html":{},"coverage.html":{}}}],["src/app/board/board.ts:16",{"_index":70,"title":{},"body":{"classes/Board.html":{}}}],["src/app/board/board.ts:20",{"_index":73,"title":{},"body":{"classes/Board.html":{}}}],["src/app/board/board.ts:5",{"_index":65,"title":{},"body":{"classes/Board.html":{}}}],["src/app/board/board.ts:7",{"_index":69,"title":{},"body":{"classes/Board.html":{}}}],["src/app/board/board.ts:9",{"_index":61,"title":{},"body":{"classes/Board.html":{}}}],["src/app/board/classical",{"_index":115,"title":{},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"coverage.html":{}}}],["src/app/game/game.component.ts",{"_index":348,"title":{},"body":{"components/GameComponent.html":{},"coverage.html":{}}}],["src/app/game/game.component.ts:105",{"_index":375,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:110",{"_index":369,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:35",{"_index":391,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:36",{"_index":384,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:38",{"_index":386,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:39",{"_index":379,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:40",{"_index":381,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:41",{"_index":389,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:42",{"_index":380,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:43",{"_index":388,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:46",{"_index":366,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:54",{"_index":372,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:69",{"_index":377,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/game/game.component.ts:96",{"_index":368,"title":{},"body":{"components/GameComponent.html":{}}}],["src/app/history/history.component.ts",{"_index":427,"title":{},"body":{"components/HistoryComponent.html":{},"coverage.html":{}}}],["src/app/history/history.component.ts:18",{"_index":432,"title":{},"body":{"components/HistoryComponent.html":{}}}],["src/app/history/history.component.ts:22",{"_index":433,"title":{},"body":{"components/HistoryComponent.html":{}}}],["src/app/overlay/overlay.component.ts",{"_index":455,"title":{},"body":{"components/OverlayComponent.html":{},"coverage.html":{}}}],["src/app/overlay/overlay.component.ts:15",{"_index":463,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:18",{"_index":467,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:24",{"_index":472,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/overlay/overlay.component.ts:28",{"_index":470,"title":{},"body":{"components/OverlayComponent.html":{}}}],["src/app/service/classical",{"_index":233,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"coverage.html":{}}}],["src/app/service/confetti/confetti.service.ts",{"_index":320,"title":{},"body":{"injectables/ConfettiService.html":{},"coverage.html":{}}}],["src/app/service/confetti/confetti.service.ts:43",{"_index":325,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["src/app/service/confetti/confetti.service.ts:6",{"_index":328,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["src/app/service/confetti/confetti.service.ts:8",{"_index":327,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["src/app/service/storage/storage.service.ts",{"_index":480,"title":{},"body":{"injectables/StorageService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/service/storage/storage.service.ts:11",{"_index":489,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/service/storage/storage.service.ts:22",{"_index":484,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/service/storage/storage.service.ts:26",{"_index":487,"title":{},"body":{"injectables/StorageService.html":{}}}],["src/app/service/tile/tile.service.ts",{"_index":524,"title":{},"body":{"injectables/TileService.html":{},"coverage.html":{}}}],["src/app/service/tile/tile.service.ts:11",{"_index":534,"title":{},"body":{"injectables/TileService.html":{}}}],["src/app/service/tile/tile.service.ts:26",{"_index":531,"title":{},"body":{"injectables/TileService.html":{}}}],["src/app/service/tile/tile.service.ts:34",{"_index":529,"title":{},"body":{"injectables/TileService.html":{}}}],["src/app/service/tile/tile.service.ts:8",{"_index":527,"title":{},"body":{"injectables/TileService.html":{}}}],["src/app/service/timer/timer.service.ts",{"_index":540,"title":{},"body":{"injectables/TimerService.html":{},"coverage.html":{}}}],["src/app/service/timer/timer.service.ts:10",{"_index":546,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/service/timer/timer.service.ts:14",{"_index":548,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/service/timer/timer.service.ts:26",{"_index":549,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/service/timer/timer.service.ts:32",{"_index":547,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/service/timer/timer.service.ts:7",{"_index":552,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/service/timer/timer.service.ts:8",{"_index":550,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/service/timer/timer.service.ts:9",{"_index":551,"title":{},"body":{"injectables/TimerService.html":{}}}],["src/app/tile/tile.component.ts",{"_index":520,"title":{},"body":{"components/TileComponent.html":{},"coverage.html":{}}}],["src/app/tile/tile.component.ts:13",{"_index":523,"title":{},"body":{"components/TileComponent.html":{}}}],["src/app/tile/tile.ts",{"_index":500,"title":{},"body":{"classes/Tile.html":{},"coverage.html":{}}}],["src/app/tile/tile.ts:11",{"_index":505,"title":{},"body":{"classes/Tile.html":{}}}],["src/app/tile/tile.ts:21",{"_index":510,"title":{},"body":{"classes/Tile.html":{}}}],["src/app/tile/tile.ts:3",{"_index":506,"title":{},"body":{"classes/Tile.html":{}}}],["src/app/tile/tile.ts:5",{"_index":509,"title":{},"body":{"classes/Tile.html":{}}}],["src/app/tile/tile.ts:7",{"_index":508,"title":{},"body":{"classes/Tile.html":{}}}],["src/app/tile/tile.ts:9",{"_index":507,"title":{},"body":{"classes/Tile.html":{}}}],["src/app/utils/types.ts",{"_index":85,"title":{},"body":{"interfaces/BoardInput.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/utils/util.ts",{"_index":560,"title":{},"body":{"classes/Util.html":{},"coverage.html":{}}}],["src/app/utils/util.ts:2",{"_index":565,"title":{},"body":{"classes/Util.html":{}}}],["standalone",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["start",{"_index":160,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/TimerService.html":{}}}],["started",{"_index":618,"title":{"index.html":{}},"body":{}}],["startnewgame",{"_index":361,"title":{},"body":{"components/GameComponent.html":{}}}],["startnewgame(rows",{"_index":370,"title":{},"body":{"components/GameComponent.html":{}}}],["startvelocity",{"_index":338,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["statements",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":561,"title":{},"body":{"classes/Util.html":{}}}],["status",{"_index":52,"title":{},"body":{"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["stop",{"_index":326,"title":{},"body":{"injectables/ConfettiService.html":{},"injectables/TimerService.html":{}}}],["stopconfettis",{"_index":322,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["stopconfettis(stop",{"_index":324,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["storageservice",{"_index":365,"title":{"injectables/StorageService.html":{}},"body":{"components/GameComponent.html":{},"components/HistoryComponent.html":{},"injectables/StorageService.html":{},"coverage.html":{}}}],["stored",{"_index":646,"title":{},"body":{"index.html":{}}}],["string",{"_index":99,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"miscellaneous/variables.html":{}}}],["styleurl",{"_index":146,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["super(id",{"_index":135,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["surroundingmines",{"_index":264,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["table",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["templateurl",{"_index":144,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["test",{"_index":651,"title":{},"body":{"index.html":{}}}],["testing",{"_index":663,"title":{},"body":{"index.html":{}}}],["tests",{"_index":650,"title":{},"body":{"index.html":{}}}],["this.assignminesaroundtile(tileboard",{"_index":305,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.board",{"_index":206,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.board.isgameover",{"_index":220,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.board.iswon",{"_index":221,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.board.status",{"_index":212,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.board.tiles",{"_index":218,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.checkvictory(board",{"_index":279,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.columnsnumber",{"_index":209,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.conffetiservice.stopconfettis(false",{"_index":413,"title":{},"body":{"components/GameComponent.html":{}}}],["this.conffetiservice.stopconfettis(true",{"_index":406,"title":{},"body":{"components/GameComponent.html":{}}}],["this.conffetiservice.triggerconfettis",{"_index":414,"title":{},"body":{"components/GameComponent.html":{}}}],["this.counter",{"_index":559,"title":{},"body":{"injectables/TimerService.html":{}}}],["this.displayinputs",{"_index":419,"title":{},"body":{"components/GameComponent.html":{}}}],["this.firsttilerevealed",{"_index":214,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.flagsnumber",{"_index":215,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.generationstrategy",{"_index":211,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.get(key",{"_index":491,"title":{},"body":{"injectables/StorageService.html":{}}}],["this.hasstarted",{"_index":213,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.history",{"_index":435,"title":{},"body":{"components/HistoryComponent.html":{}}}],["this.id",{"_index":78,"title":{},"body":{"classes/Board.html":{},"classes/Tile.html":{}}}],["this.initializeboard",{"_index":205,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.input",{"_index":411,"title":{},"body":{"components/GameComponent.html":{}}}],["this.input.column",{"_index":424,"title":{},"body":{"components/GameComponent.html":{}}}],["this.input.mine",{"_index":426,"title":{},"body":{"components/GameComponent.html":{}}}],["this.input.row",{"_index":423,"title":{},"body":{"components/GameComponent.html":{}}}],["this.isflagged",{"_index":516,"title":{},"body":{"classes/Tile.html":{}}}],["this.ismine",{"_index":514,"title":{},"body":{"classes/Tile.html":{}}}],["this.isrevealed",{"_index":515,"title":{},"body":{"classes/Tile.html":{}}}],["this.maxmines",{"_index":422,"title":{},"body":{"components/GameComponent.html":{}}}],["this.minesnumber",{"_index":210,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.minesweeper.columnsnumber",{"_index":401,"title":{},"body":{"components/GameComponent.html":{}}}],["this.minesweeper.initializeboard",{"_index":403,"title":{},"body":{"components/GameComponent.html":{}}}],["this.minesweeper.minesnumber",{"_index":402,"title":{},"body":{"components/GameComponent.html":{}}}],["this.minesweeper.rowsnumber",{"_index":400,"title":{},"body":{"components/GameComponent.html":{}}}],["this.mode",{"_index":399,"title":{},"body":{"components/GameComponent.html":{}}}],["this.neighbors",{"_index":517,"title":{},"body":{"classes/Tile.html":{}}}],["this.neighbors.filter((tile",{"_index":518,"title":{},"body":{"classes/Tile.html":{}}}],["this.notifygamestatus.emit",{"_index":223,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.numberofminesleft",{"_index":137,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["this.off",{"_index":476,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.overlaydata",{"_index":415,"title":{},"body":{"components/GameComponent.html":{}}}],["this.overlaydata.display",{"_index":478,"title":{},"body":{"components/OverlayComponent.html":{}}}],["this.restartgameevent.emit",{"_index":228,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.result",{"_index":404,"title":{},"body":{"components/GameComponent.html":{}}}],["this.reveal(neighbor",{"_index":537,"title":{},"body":{"injectables/TileService.html":{}}}],["this.revealtile(board",{"_index":274,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.rowsnumber",{"_index":208,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.running",{"_index":553,"title":{},"body":{"injectables/TimerService.html":{}}}],["this.setgameover(board",{"_index":278,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.start",{"_index":216,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.startnewgame(this.input.row",{"_index":425,"title":{},"body":{"components/GameComponent.html":{}}}],["this.status",{"_index":79,"title":{},"body":{"classes/Board.html":{}}}],["this.storageservice.gethistory",{"_index":436,"title":{},"body":{"components/HistoryComponent.html":{}}}],["this.storageservice.insert(record",{"_index":412,"title":{},"body":{"components/GameComponent.html":{}}}],["this.tiles",{"_index":136,"title":{},"body":{"classes/ClassicalBoard.html":{}}}],["this.tileservice",{"_index":262,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.tileservice.assignmines(tiles",{"_index":293,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.tileservice.finishinitialization",{"_index":217,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.tileservice.generatetileboard",{"_index":207,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.tileservice.generatetiles(rowsnumber",{"_index":292,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.tileservice.reveal(tile",{"_index":277,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["this.tileservice.revealtile(this.board",{"_index":222,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.tileset",{"_index":80,"title":{},"body":{"classes/Board.html":{}}}],["this.timeremitter.emit(this.counter",{"_index":555,"title":{},"body":{"injectables/TimerService.html":{}}}],["this.timerref",{"_index":556,"title":{},"body":{"injectables/TimerService.html":{}}}],["this.timerservice.clear",{"_index":405,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timerservice.counter",{"_index":224,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["this.timerservice.start",{"_index":418,"title":{},"body":{"components/GameComponent.html":{}}}],["this.timerservice.stop",{"_index":417,"title":{},"body":{"components/GameComponent.html":{}}}],["this.updateboard",{"_index":421,"title":{},"body":{"components/GameComponent.html":{}}}],["threatcount",{"_index":535,"title":{},"body":{"injectables/TileService.html":{}}}],["ticks",{"_index":342,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["tile",{"_index":41,"title":{"classes/Tile.html":{}},"body":{"components/AppComponent.html":{},"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"coverage.html":{}}}],["tile.component.css",{"_index":522,"title":{},"body":{"components/TileComponent.html":{}}}],["tile.component.html",{"_index":521,"title":{},"body":{"components/TileComponent.html":{}}}],["tile.getthreatcount",{"_index":265,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{}}}],["tile.isflagged",{"_index":219,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["tile.ismine",{"_index":285,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["tile.ismine).length",{"_index":519,"title":{},"body":{"classes/Tile.html":{}}}],["tile.isrevealed",{"_index":225,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["tile.isrevealed).length",{"_index":288,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tile.neighbors",{"_index":269,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["tile.neighbors.filter((n",{"_index":267,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tile.neighbors.slice",{"_index":307,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tile/tile",{"_index":74,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["tile/tile.component",{"_index":198,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["tile/tile.service",{"_index":260,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tile?.ismine",{"_index":276,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tile?.isrevealed",{"_index":263,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tileboard",{"_index":245,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tileboard.length",{"_index":298,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tileboard[0].length",{"_index":310,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tileboard[row].length",{"_index":301,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tileboard[row][column",{"_index":316,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tilecomponent",{"_index":40,"title":{"components/TileComponent.html":{}},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"coverage.html":{}}}],["tileidx",{"_index":297,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tiles",{"_index":121,"title":{},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["tiles[idxmine].ismine",{"_index":539,"title":{},"body":{"injectables/TileService.html":{}}}],["tileservice",{"_index":172,"title":{"injectables/TileService.html":{}},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{},"coverage.html":{}}}],["tileset",{"_index":53,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{}}}],["tilesnumber",{"_index":532,"title":{},"body":{"injectables/TileService.html":{}}}],["tilestoavoid",{"_index":306,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tilestoavoid.includes(evaluatedtile",{"_index":317,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tilestoavoid.length",{"_index":313,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["tilestoavoid.push(tile",{"_index":308,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["time",{"_index":101,"title":{},"body":{"interfaces/BoardInput.html":{},"components/ClassicalBoardComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"interfaces/OverlayData.html":{}}}],["timeleft",{"_index":347,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["timeremitter",{"_index":543,"title":{},"body":{"injectables/TimerService.html":{}}}],["timerref",{"_index":544,"title":{},"body":{"injectables/TimerService.html":{}}}],["timerservice",{"_index":153,"title":{"injectables/TimerService.html":{}},"body":{"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"injectables/TimerService.html":{},"coverage.html":{}}}],["timerservice.timeremitter",{"_index":229,"title":{},"body":{"components/ClassicalBoardComponent.html":{}}}],["tree",{"_index":6,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{}}}],["triggerconfettis",{"_index":323,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["true",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}}}],["tslib",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["tsparticles",{"_index":330,"title":{},"body":{"injectables/ConfettiService.html":{},"dependencies.html":{}}}],["two",{"_index":294,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["type",{"_index":63,"title":{},"body":{"classes/Board.html":{},"interfaces/BoardInput.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"interfaces/NotificationStatus.html":{},"components/OverlayComponent.html":{},"interfaces/OverlayData.html":{},"injectables/StorageService.html":{},"classes/Tile.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{},"classes/Util.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":679,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":477,"title":{},"body":{"components/OverlayComponent.html":{}}}],["undefined",{"_index":390,"title":{},"body":{"components/GameComponent.html":{}}}],["unit",{"_index":649,"title":{},"body":{"index.html":{}}}],["updateboard",{"_index":362,"title":{},"body":{"components/GameComponent.html":{}}}],["updategamestatus",{"_index":363,"title":{},"body":{"components/GameComponent.html":{}}}],["updategamestatus(event",{"_index":376,"title":{},"body":{"components/GameComponent.html":{}}}],["use",{"_index":642,"title":{},"body":{"index.html":{}}}],["util",{"_index":258,"title":{"classes/Util.html":{}},"body":{"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{},"classes/Util.html":{},"coverage.html":{}}}],["util.getrandomint(0",{"_index":314,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["utils/types",{"_index":202,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{}}}],["utils/util",{"_index":259,"title":{},"body":{"injectables/ClassicalBoardService.html":{},"injectables/TileService.html":{}}}],["value",{"_index":125,"title":{},"body":{"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"injectables/TimerService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"components/TileComponent.html":{},"injectables/TileService.html":{}}}],["variable",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":681,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":624,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":653,"title":{},"body":{"index.html":{}}}],["viewchild",{"_index":392,"title":{},"body":{"components/GameComponent.html":{}}}],["viewchild('minesweeper",{"_index":383,"title":{},"body":{"components/GameComponent.html":{}}}],["void",{"_index":182,"title":{},"body":{"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"injectables/ConfettiService.html":{},"components/GameComponent.html":{},"components/HistoryComponent.html":{},"components/OverlayComponent.html":{},"injectables/StorageService.html":{},"injectables/TileService.html":{},"injectables/TimerService.html":{}}}],["whether",{"_index":511,"title":{},"body":{"classes/Tile.html":{}}}],["win",{"_index":290,"title":{},"body":{"injectables/ClassicalBoardService.html":{}}}],["window:keyup",{"_index":462,"title":{},"body":{"components/OverlayComponent.html":{}}}],["window:keyup(event",{"_index":465,"title":{},"body":{"components/OverlayComponent.html":{}}}],["won",{"_index":68,"title":{},"body":{"classes/Board.html":{},"classes/ClassicalBoard.html":{},"components/ClassicalBoardComponent.html":{},"injectables/ClassicalBoardService.html":{},"components/GameComponent.html":{}}}],["x",{"_index":443,"title":{},"body":{"components/HistoryComponent.html":{}}}],["y",{"_index":451,"title":{},"body":{"components/HistoryComponent.html":{}}}],["yes",{"_index":374,"title":{},"body":{"components/GameComponent.html":{}}}],["zindex",{"_index":344,"title":{},"body":{"injectables/ConfettiService.html":{}}}],["zone.js",{"_index":612,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                GameComponent\n                \n            \n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { GameComponent } from './game/game.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [GameComponent],\n  template: '',\n})\nexport class AppComponent {}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ClassicalBoardComponent', 'selector': 'classical-board'},{'name': 'GameComponent', 'selector': 'game'},{'name': 'HistoryComponent', 'selector': 'history'},{'name': 'OverlayComponent', 'selector': 'overlay'},{'name': 'TileComponent', 'selector': 'tile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Board.html":{"url":"classes/Board.html","title":"class - Board","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Board\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/board.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                tileSet\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isGameOver\n                            \n                            \n                                isWon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/board.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/board.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ONGOING\" | \"GAMEOVER\" | \"WON\"\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/board.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileSet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tile[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/board.ts:9\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isGameOver\n                        \n                    \n                \n            \n            \n                \nisGameOver()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isWon\n                        \n                    \n                \n            \n            \n                \nisWon()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/board.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Tile } from '../tile/tile';\n\nexport abstract class Board {\n  // Id of the board\n  id: number;\n  // Current status\n  status: 'ONGOING' | 'GAMEOVER' | 'WON';\n  // the tile set\n  tileSet: Tile[];\n\n  constructor(id: number) {\n    this.id = id;\n    this.status = 'ONGOING';\n    this.tileSet = [];\n  }\n  isGameOver(): boolean {\n    return this.status == 'GAMEOVER';\n  }\n\n  isWon(): boolean {\n    return this.status == 'WON';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BoardInput.html":{"url":"interfaces/BoardInput.html","title":"interface - BoardInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BoardInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/utils/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            column\n                                        \n                                \n                                \n                                        \n                                            mine\n                                        \n                                \n                                \n                                        \n                                            row\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        column:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mine\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mine:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        row\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        row:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type GenerationStrategy = 'AT_FIRST_CLICK' | 'BEFORE_STARTING';\n\nexport enum GameMode {\n  BEGINNER = 'Beginner',\n  INTERMEDIATE = 'Intermediate',\n  EXPERT = 'Expert',\n  CUSTOM = 'Custom',\n}\n\nexport interface NotificationStatus {\n  status: string;\n  flagged: number;\n  time: number;\n}\n\nexport type HistoryRecord = NotificationStatus & {\n  mode: GameMode;\n  date: Date;\n  input?: BoardInput;\n};\n\nexport interface BoardInput {\n  row: number;\n  column: number;\n  mine: number;\n}\n\nexport interface OverlayData {\n  display: boolean;\n  content?: OverlayContent;\n}\n\nexport enum OverlayContent {\n  EXPLOSION = 1,\n  HISTORY = 2,\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClassicalBoard.html":{"url":"classes/ClassicalBoard.html","title":"class - ClassicalBoard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClassicalBoard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/board/classical-board/classical-board.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Board\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                numberOfMinesLeft\n                            \n                            \n                                numberOfUnRevealedTiles\n                            \n                            \n                                tiles\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                tileSet\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isGameOver\n                            \n                            \n                                isWon\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, numberOfMinesLeft: number)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/classical-board/classical-board.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        numberOfMinesLeft\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        numberOfMinesLeft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        numberOfUnRevealedTiles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tiles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tile[][]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         Board\n\n                            \n                        \n                    \n                        \n                                Defined in         Board:5\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"ONGOING\" | \"GAMEOVER\" | \"WON\"\n\n                    \n                \n                        \n                            \n                                Inherited from         Board\n\n                            \n                        \n                    \n                        \n                                Defined in         Board:7\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tileSet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tile[]\n\n                    \n                \n                        \n                            \n                                Inherited from         Board\n\n                            \n                        \n                    \n                        \n                                Defined in         Board:9\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isGameOver\n                        \n                    \n                \n            \n            \n                \nisGameOver()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Board\n\n                        \n                    \n                    \n                        \n                                Defined in         Board:16\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isWon\n                        \n                    \n                \n            \n            \n                \nisWon()\n                \n            \n\n\n                    \n                        \n                            Inherited from         Board\n\n                        \n                    \n                    \n                        \n                                Defined in         Board:20\n\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Board } from '../board';\nimport { Tile } from '../../tile/tile';\n\nexport class ClassicalBoard extends Board {\n  // the representation of the tiles on the board\n  tiles: Tile[][];\n  numberOfMinesLeft: number;\n  numberOfUnRevealedTiles: number = 0;\n\n  constructor(id: number, numberOfMinesLeft: number) {\n    super(id);\n    this.tiles = [];\n    this.numberOfMinesLeft = numberOfMinesLeft;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ClassicalBoardComponent.html":{"url":"components/ClassicalBoardComponent.html","title":"component - ClassicalBoardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ClassicalBoardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/board/classical-board/classical-board.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                classical-board\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                TileComponent\n                            NgForOf\n                            NgIf\n                            AsyncPipe\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./classical-board.component.html\n            \n\n\n\n            \n                styleUrl\n                ./classical-board.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                board\n                            \n                            \n                                    Private\n                                firstTileRevealed\n                            \n                            \n                                flagsNumber\n                            \n                            \n                                    Private\n                                generationStrategy\n                            \n                            \n                                    Private\n                                hasStarted\n                            \n                            \n                                    Public\n                                timerService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getGameStatus\n                            \n                            \n                                handleTileClick\n                            \n                            \n                                initializeBoard\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onRightClick\n                            \n                            \n                                restartGame\n                            \n                            \n                                    Private\n                                start\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                columnsNumber\n                            \n                            \n                                minesNumber\n                            \n                            \n                                rowsNumber\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                notifyGameStatus\n                            \n                            \n                                restartGameEvent\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    tiles\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(tileService: ClassicalBoardService, timerService: TimerService)\n                    \n                \n                        \n                            \n                                Defined in src/app/board/classical-board/classical-board.component.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tileService\n                                                  \n                                                        \n                                                                        ClassicalBoardService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timerService\n                                                  \n                                                        \n                                                                        TimerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        columnsNumber\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/classical-board/classical-board.component.ts:19\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        minesNumber\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/classical-board/classical-board.component.ts:20\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        rowsNumber\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/classical-board/classical-board.component.ts:18\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        notifyGameStatus\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/classical-board/classical-board.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        restartGameEvent\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/board/classical-board/classical-board.component.ts:23\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getGameStatus\n                        \n                    \n                \n            \n            \n                \ngetGameStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:101\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleTileClick\n                        \n                    \n                \n            \n            \n                \nhandleTileClick(tile: Tile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tile\n                                            \n                                                            Tile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initializeBoard\n                        \n                    \n                \n            \n            \n                \ninitializeBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:39\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:35\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onRightClick\n                        \n                    \n                \n            \n            \n                \nonRightClick(tile: Tile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tile\n                                            \n                                                            Tile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restartGame\n                        \n                    \n                \n            \n            \n                \nrestartGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:107\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        start\n                        \n                    \n                \n            \n            \n                \n                        \n                    start()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/board/classical-board/classical-board.component.ts:90\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        board\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassicalBoard\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firstTileRevealed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        flagsNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generationStrategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GenerationStrategy\n\n                    \n                \n                \n                    \n                        Default value : 'AT_FIRST_CLICK'\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hasStarted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timerService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimerService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/board/classical-board/classical-board.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        tiles\n                    \n                \n\n                \n                    \n                        gettiles()\n                    \n                \n                            \n                                \n                                    Defined in src/app/board/classical-board/classical-board.component.ts:111\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Tile } from '../../tile/tile';\nimport { TileComponent } from '../../tile/tile.component';\nimport { AsyncPipe, NgForOf, NgIf } from '@angular/common';\nimport { ClassicalBoardService } from '../../service/classical-board/classical-board.service';\nimport { ClassicalBoard } from './classical-board';\nimport { GenerationStrategy, NotificationStatus } from '../../utils/types';\nimport { TimerService } from '../../service/timer/timer.service';\n\n@Component({\n  selector: 'classical-board',\n  standalone: true,\n  imports: [TileComponent, NgForOf, NgIf, AsyncPipe],\n  templateUrl: './classical-board.component.html',\n  styleUrl: './classical-board.component.css',\n})\nexport class ClassicalBoardComponent implements OnInit {\n  @Input() rowsNumber!: number;\n  @Input() columnsNumber!: number;\n  @Input() minesNumber!: number;\n  @Output() notifyGameStatus: EventEmitter =\n    new EventEmitter();\n  @Output() restartGameEvent: EventEmitter = new EventEmitter();\n  board!: ClassicalBoard;\n  flagsNumber: number = 0;\n  private hasStarted: boolean = false;\n  private firstTileRevealed: boolean = false;\n  private generationStrategy: GenerationStrategy = 'AT_FIRST_CLICK';\n\n  constructor(\n    private tileService: ClassicalBoardService,\n    public timerService: TimerService,\n  ) {}\n\n  ngOnInit(): void {\n    this.initializeBoard();\n  }\n\n  initializeBoard() {\n    this.board = this.tileService.generateTileBoard(\n      this.rowsNumber,\n      this.columnsNumber,\n      this.minesNumber,\n      this.generationStrategy,\n    );\n    this.board.status = 'ONGOING';\n    this.hasStarted = false;\n    this.firstTileRevealed = false;\n    this.flagsNumber = 0;\n  }\n\n  handleTileClick(tile: Tile) {\n    this.start();\n    if (!this.firstTileRevealed) {\n      this.tileService.finishInitialization(\n        this.board.tiles,\n        this.generationStrategy,\n        this.minesNumber,\n        tile,\n      );\n      this.firstTileRevealed = true;\n    }\n    if (!tile || tile.isFlagged) {\n      return;\n    }\n    if (this.board.isGameOver() || this.board.isWon()) {\n      return;\n    }\n    this.tileService.revealTile(this.board, tile);\n\n    if (this.board.isWon() || this.board.isGameOver()) {\n      this.notifyGameStatus.emit({\n        status: this.board.status,\n        flagged: this.flagsNumber,\n        time: this.timerService.counter - 1,\n      });\n    }\n  }\n\n  onRightClick(tile: Tile) {\n    this.start();\n\n    if (tile.isRevealed) return false;\n    tile.isFlagged = !tile.isFlagged;\n    if (tile.isFlagged) this.flagsNumber++;\n    else this.flagsNumber--;\n    return false;\n  }\n\n  private start() {\n    if (!this.hasStarted) {\n      this.hasStarted = true;\n      this.notifyGameStatus.emit({\n        status: 'ONGOING',\n        flagged: this.flagsNumber,\n        time: this.timerService.counter,\n      });\n    }\n  }\n\n  getGameStatus(): string {\n    if (this.board.status == 'GAMEOVER') return 'lost';\n    if (this.board.status == 'WON') return 'won';\n    return 'play';\n  }\n\n  restartGame() {\n    this.restartGameEvent.emit();\n  }\n\n  get tiles(): Tile[][] {\n    return this.board.tiles;\n  }\n}\n\n    \n\n    \n        \n  \n    \n      {{ minesNumber - flagsNumber }}\n      \n      {{ (timerService.timerEmitter | async) || 0 }}\n    \n    \n      \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{ minesNumber - flagsNumber }}            {{ (timerService.timerEmitter | async) || 0 }}                    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ClassicalBoardComponent', 'selector': 'classical-board'},{'name': 'GameComponent', 'selector': 'game'},{'name': 'HistoryComponent', 'selector': 'history'},{'name': 'OverlayComponent', 'selector': 'overlay'},{'name': 'TileComponent', 'selector': 'tile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ClassicalBoardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClassicalBoardService.html":{"url":"injectables/ClassicalBoardService.html","title":"injectable - ClassicalBoardService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClassicalBoardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/service/classical-board/classical-board.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tileService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                assignMinesAroundTile\n                            \n                            \n                                checkVictory\n                            \n                            \n                                finishInitialization\n                            \n                            \n                                generateTileBoard\n                            \n                            \n                                    Private\n                                getNeighbors\n                            \n                            \n                                revealTile\n                            \n                            \n                                setGameOver\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tileService: TileService)\n                    \n                \n                        \n                            \n                                Defined in src/app/service/classical-board/classical-board.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tileService\n                                                  \n                                                        \n                                                                        TileService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        assignMinesAroundTile\n                        \n                    \n                \n            \n            \n                \n                        \n                    assignMinesAroundTile(tileBoard: Tile[][], minesNumber: number, tile: Tile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:116\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tileBoard\n                                            \n                                                            Tile[][]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                minesNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tile\n                                            \n                                                            Tile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkVictory\n                        \n                    \n                \n            \n            \n                \ncheckVictory(board: ClassicalBoard)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                board\n                                            \n                                                            ClassicalBoard\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finishInitialization\n                        \n                    \n                \n            \n            \n                \nfinishInitialization(tileBoard: Tile[][], generationStrategy: GenerationStrategy, minesNumber: number, tile: Tile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:105\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tileBoard\n                                            \n                                                            Tile[][]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                generationStrategy\n                                            \n                                                            GenerationStrategy\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                minesNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tile\n                                            \n                                                            Tile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTileBoard\n                        \n                    \n                \n            \n            \n                \ngenerateTileBoard(rowsNumber: number, columnsNumber: number, minesNumber: number, generationStrategy: GenerationStrategy)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rowsNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                columnsNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                minesNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                generationStrategy\n                                            \n                                                            GenerationStrategy\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ClassicalBoard\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getNeighbors\n                        \n                    \n                \n            \n            \n                \n                        \n                    getNeighbors(tileBoard: Tile[][], row: number, column: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tileBoard\n                                            \n                                                            Tile[][]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                row\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                column\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        revealTile\n                        \n                    \n                \n            \n            \n                \nrevealTile(board: ClassicalBoard, tile: Tile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                board\n                                            \n                                                            ClassicalBoard\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tile\n                                            \n                                                            Tile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setGameOver\n                        \n                    \n                \n            \n            \n                \nsetGameOver(board: ClassicalBoard)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/classical-board/classical-board.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                board\n                                            \n                                                            ClassicalBoard\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tileService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TileService\n\n                    \n                \n                    \n                        \n                                Defined in src/app/service/classical-board/classical-board.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Tile } from '../../tile/tile';\nimport { ClassicalBoard } from '../../board/classical-board/classical-board';\nimport { GenerationStrategy } from '../../utils/types';\nimport { Util } from '../../utils/util';\nimport { TileService } from '../tile/tile.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClassicalBoardService {\n  private tileService: TileService;\n\n  constructor(tileService: TileService) {\n    this.tileService = tileService;\n  }\n\n  revealTile(board: ClassicalBoard, tile: Tile): void {\n    if (tile?.isRevealed) {\n      let surroundingMines = tile.getThreatCount();\n      let flaggedMines = tile.neighbors.filter((n) => n.isFlagged).length;\n      if (surroundingMines > 0 && flaggedMines == surroundingMines) {\n        tile.neighbors\n          .filter((n) => !n.isRevealed && !n.isFlagged)\n          .forEach((n) => this.revealTile(board, n));\n      }\n      return;\n    }\n\n    if (tile?.isMine) {\n      this.tileService.reveal(tile);\n      this.setGameOver(board);\n    } else {\n      this.tileService.reveal(tile);\n      this.checkVictory(board);\n    }\n  }\n\n  setGameOver(board: ClassicalBoard) {\n    board.status = 'GAMEOVER';\n    //reveal all mines and flagged tile\n    board.tileSet\n      .filter((tile) => tile.isMine || tile.isFlagged)\n      .forEach((tile) => (tile.isRevealed = true));\n  }\n  checkVictory(board: ClassicalBoard) {\n    if (\n      board.tileSet.filter((tile) => !tile.isMine && !tile.isRevealed).length ==\n      0\n    ) {\n      //if all not mine are revealed, you win\n      board.status = 'WON';\n    }\n  }\n  generateTileBoard(\n    rowsNumber: number,\n    columnsNumber: number,\n    minesNumber: number,\n    generationStrategy: GenerationStrategy,\n  ): ClassicalBoard {\n    let classicalBoard = new ClassicalBoard(1, minesNumber);\n\n    let tiles = this.tileService.generateTiles(rowsNumber * columnsNumber);\n    if (generationStrategy == 'BEFORE_STARTING') {\n      tiles = this.tileService.assignMines(tiles, minesNumber);\n    }\n\n    //set them in a two dimensional array\n    let tileIdx = 0;\n    let tileBoard: Tile[][] = [];\n    for (var i = 0; i = tileBoard.length) continue;\n      for (var j = -1; j = tileBoard[row].length) continue;\n        if (i == 0 && j == 0) continue;\n        neighbors.push(tileBoard[row + i][column + j]);\n      }\n    }\n    return neighbors;\n  }\n\n  finishInitialization(\n    tileBoard: Tile[][],\n    generationStrategy: GenerationStrategy,\n    minesNumber: number,\n    tile: Tile,\n  ): void {\n    if (generationStrategy == 'AT_FIRST_CLICK') {\n      this.assignMinesAroundTile(tileBoard, minesNumber, tile);\n    }\n  }\n\n  private assignMinesAroundTile(\n    tileBoard: Tile[][],\n    minesNumber: number,\n    tile: Tile,\n  ): void {\n    let tilesToAvoid = tile.neighbors.slice();\n    tilesToAvoid.push(tile);\n    let boardSize = tileBoard[0].length * tileBoard.length;\n\n    minesNumber = Math.min(boardSize, minesNumber);\n    let isItPossible = true;\n\n    if (boardSize - tilesToAvoid.length  0) {\n      let row = Util.getRandomInt(0, tileBoard.length);\n      let column = Util.getRandomInt(0, tileBoard[0].length);\n      let evaluatedTile = tileBoard[row][column];\n      if (\n        !isItPossible ||\n        (!tilesToAvoid.includes(evaluatedTile) && !evaluatedTile.isMine)\n      ) {\n        evaluatedTile.isMine = true;\n        minesNumber--;\n      }\n    }\n\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfettiService.html":{"url":"injectables/ConfettiService.html","title":"injectable - ConfettiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfettiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/service/confetti/confetti.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                confettis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                stopConfettis\n                            \n                            \n                                triggerConfettis\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        stopConfettis\n                        \n                    \n                \n            \n            \n                \nstopConfettis(stop: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/confetti/confetti.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                stop\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        triggerConfettis\n                        \n                    \n                \n            \n            \n                \ntriggerConfettis()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/confetti/confetti.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        confettis\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/service/confetti/confetti.service.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { confetti } from 'tsparticles-confetti';\n\n@Injectable({ providedIn: 'root' })\nexport class ConfettiService {\n  private confettis: boolean = false;\n\n  triggerConfettis() {\n    const duration = 15 * 1000,\n      animationEnd = Date.now() + duration,\n      defaults = { startVelocity: 20, spread: 360, ticks: 60, zIndex: 0 };\n\n    const interval = setInterval(() => {\n      const timeLeft = animationEnd - Date.now();\n\n      if (timeLeft \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/GameComponent.html":{"url":"components/GameComponent.html","title":"component - GameComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  GameComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/game/game.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                game\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                ClassicalBoardComponent\n                                HistoryComponent\n                            NgIf\n                            FormsModule\n                            DatePipe\n                            FormsModule\n                                OverlayComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./game.component.html\n            \n\n\n\n            \n                styleUrl\n                ./game.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                displayInputs\n                            \n                            \n                                input\n                            \n                            \n                                maxMines\n                            \n                            \n                                    \n                                minesweeper\n                            \n                            \n                                mode\n                            \n                            \n                                overlayData\n                            \n                            \n                                playingTime\n                            \n                            \n                                result\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                customGame\n                            \n                            \n                                settings\n                            \n                            \n                                startNewGame\n                            \n                            \n                                updateBoard\n                            \n                            \n                                updateGameStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(conffetiService: ConfettiService, timerService: TimerService, storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/game/game.component.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        conffetiService\n                                                  \n                                                        \n                                                                        ConfettiService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        timerService\n                                                  \n                                                        \n                                                                        TimerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        customGame\n                        \n                    \n                \n            \n            \n                \ncustomGame()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/game.component.ts:96\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        settings\n                        \n                    \n                \n            \n            \n                \nsettings()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/game.component.ts:110\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startNewGame\n                        \n                    \n                \n            \n            \n                \nstartNewGame(rows?: number, columns?: number, mines?: number, mode?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/game.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                rows\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                columns\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                mines\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                mode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateBoard\n                        \n                    \n                \n            \n            \n                \nupdateBoard()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/game.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateGameStatus\n                        \n                    \n                \n            \n            \n                \nupdateGameStatus(event: NotificationStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/game/game.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            NotificationStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        displayInputs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        input\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BoardInput\n\n                    \n                \n                \n                    \n                        Default value : { row: 1, column: 1, mine: 1 }\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        maxMines\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        minesweeper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClassicalBoardComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('minesweeper')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GameMode\n\n                    \n                \n                \n                    \n                        Default value : GameMode.BEGINNER\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        overlayData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OverlayData\n\n                    \n                \n                \n                    \n                        Default value : {\n    display: false,\n    content: OverlayContent.HISTORY,\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        playingTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        result\n                        \n                    \n                \n            \n                \n                    \n                        Type :     undefined | \"ONGOING\" | \"WON\" | \"GAMEOVER\"\n\n                    \n                \n                    \n                        \n                                Defined in src/app/game/game.component.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ViewChild } from '@angular/core';\nimport { ClassicalBoardComponent } from '../board/classical-board/classical-board.component';\nimport { DatePipe, NgIf } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ConfettiService } from '../service/confetti/confetti.service';\nimport { TimerService } from '../service/timer/timer.service';\nimport { StorageService } from '../service/storage/storage.service';\nimport { HistoryComponent } from '../history/history.component';\nimport {\n  BoardInput,\n  GameMode,\n  HistoryRecord,\n  NotificationStatus,\n  OverlayContent,\n  OverlayData,\n} from '../utils/types';\nimport { OverlayComponent } from '../overlay/overlay.component';\n\n@Component({\n  selector: 'game',\n  standalone: true,\n  imports: [\n    ClassicalBoardComponent,\n    HistoryComponent,\n    NgIf,\n    FormsModule,\n    DatePipe,\n    FormsModule,\n    OverlayComponent,\n  ],\n  templateUrl: './game.component.html',\n  styleUrl: './game.component.css',\n})\nexport class GameComponent {\n  result: undefined | 'ONGOING' | 'WON' | 'GAMEOVER';\n  @ViewChild('minesweeper') minesweeper!: ClassicalBoardComponent;\n\n  mode: GameMode = GameMode.BEGINNER;\n  displayInputs: boolean = false;\n  maxMines: number = 0;\n  playingTime: number = 0;\n  input: BoardInput = { row: 1, column: 1, mine: 1 };\n  overlayData: OverlayData = {\n    display: false,\n    content: OverlayContent.HISTORY,\n  };\n\n  constructor(\n    private conffetiService: ConfettiService,\n    private timerService: TimerService,\n    private storageService: StorageService,\n  ) {}\n\n  startNewGame(rows?: number, columns?: number, mines?: number, mode?: string) {\n    if (mode) {\n      this.mode = mode as GameMode;\n    }\n    if (rows !== undefined && columns !== undefined && mines !== undefined) {\n      this.minesweeper.rowsNumber = rows;\n      this.minesweeper.columnsNumber = columns;\n      this.minesweeper.minesNumber = mines;\n    }\n    this.minesweeper.initializeBoard();\n    this.result = undefined;\n    this.timerService.clear();\n    this.conffetiService.stopConfettis(true);\n  }\n\n  updateGameStatus(event: NotificationStatus) {\n    if (event.status === 'WON' || event.status === 'GAMEOVER') {\n      let record: HistoryRecord = {\n        ...event,\n        mode: this.mode,\n        date: new Date(),\n      };\n      if (this.mode === GameMode.CUSTOM) {\n        record.input = this.input;\n      }\n      this.storageService.insert(record);\n      if (event.status === 'WON') {\n        this.conffetiService.stopConfettis(false);\n        this.conffetiService.triggerConfettis();\n        this.overlayData = { display: false };\n      }\n      if (event.status === 'GAMEOVER') {\n        this.overlayData = { display: true, content: OverlayContent.EXPLOSION };\n      }\n      this.timerService.stop();\n      this.result = event.status;\n    } else if (event.status === 'ONGOING') {\n      this.timerService.start();\n      this.result = event.status;\n    }\n  }\n\n  customGame() {\n    this.mode = GameMode.CUSTOM;\n    if (!this.displayInputs) {\n      this.displayInputs = true;\n    }\n    this.input = { row: 3, column: 3, mine: 1 };\n    this.updateBoard();\n  }\n\n  updateBoard() {\n    this.maxMines = this.input.row * this.input.column;\n    this.startNewGame(this.input.row, this.input.column, this.input.mine);\n  }\n\n  settings() {\n    this.overlayData = { display: true, content: OverlayContent.HISTORY };\n  }\n}\n\n    \n\n    \n        \n  \n  \n  \n  \n  \n    \n      \n        Beginner\n      \n      \n        Intermediate\n      \n      \n        Expert\n      \n      \n        Custom\n      \n    \n    \n      \n        Rows: \n      \n      \n        Columns: \n      \n      \n        Mines: \n      \n    \n  \n\n  \n\n  \n\n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                            Beginner                    Intermediate                    Expert                    Custom                            Rows:                     Columns:                     Mines:                         '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ClassicalBoardComponent', 'selector': 'classical-board'},{'name': 'GameComponent', 'selector': 'game'},{'name': 'HistoryComponent', 'selector': 'history'},{'name': 'OverlayComponent', 'selector': 'overlay'},{'name': 'TileComponent', 'selector': 'tile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'GameComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HistoryComponent.html":{"url":"components/HistoryComponent.html","title":"component - HistoryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HistoryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/history/history.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                history\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgFor\n                            DatePipe\n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./history.component.html\n            \n\n\n\n            \n                styleUrl\n                ./history.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                history\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(storageService: StorageService)\n                    \n                \n                        \n                            \n                                Defined in src/app/history/history.component.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storageService\n                                                  \n                                                        \n                                                                        StorageService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/history/history.component.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        history\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/app/history/history.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { DatePipe, NgFor, NgIf } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { StorageService } from '../service/storage/storage.service';\n\n@Component({\n  selector: 'history',\n  standalone: true,\n  imports: [\n    NgFor,\n    DatePipe,\n    NgIf\n  ],\n  templateUrl: './history.component.html',\n  styleUrl: './history.component.css'\n})\nexport class HistoryComponent implements OnInit {\n  \n  history!: Array;\n\n  constructor(private storageService: StorageService) { }\n\n  ngOnInit(): void {\n    this.history = this.storageService.getHistory();\n  }\n\n}\n\n    \n\n    \n        \n 0; else elseBlock\" class=\"container\">\n  \n    \n      Status\n      Mode\n      Playing time\n      Flagged mines\n      Date\n    \n    \n      {{ item.status }}\n      \n        {{ item.mode }}\n        ({{ item.input.row }}x{{ item.input.column }})\n      \n      {{ item.time * 1000 | date: \"mm:ss\" }}\n      {{ item.flagged }}\n      {{ item.date | date: \"d MMM y HH:mm:ss\" }}\n    \n  \n\n\n  \n    No information to show.\n  \n\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' 0; else elseBlock\" class=\"container\">            Status      Mode      Playing time      Flagged mines      Date              {{ item.status }}              {{ item.mode }}        ({{ item.input.row }}x{{ item.input.column }})            {{ item.time * 1000 | date: \"mm:ss\" }}      {{ item.flagged }}      {{ item.date | date: \"d MMM y HH:mm:ss\" }}            No information to show.  '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ClassicalBoardComponent', 'selector': 'classical-board'},{'name': 'GameComponent', 'selector': 'game'},{'name': 'HistoryComponent', 'selector': 'history'},{'name': 'OverlayComponent', 'selector': 'overlay'},{'name': 'TileComponent', 'selector': 'tile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'HistoryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NotificationStatus.html":{"url":"interfaces/NotificationStatus.html","title":"interface - NotificationStatus","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NotificationStatus\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/utils/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flagged\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            time\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flagged\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flagged:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        time:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type GenerationStrategy = 'AT_FIRST_CLICK' | 'BEFORE_STARTING';\n\nexport enum GameMode {\n  BEGINNER = 'Beginner',\n  INTERMEDIATE = 'Intermediate',\n  EXPERT = 'Expert',\n  CUSTOM = 'Custom',\n}\n\nexport interface NotificationStatus {\n  status: string;\n  flagged: number;\n  time: number;\n}\n\nexport type HistoryRecord = NotificationStatus & {\n  mode: GameMode;\n  date: Date;\n  input?: BoardInput;\n};\n\nexport interface BoardInput {\n  row: number;\n  column: number;\n  mine: number;\n}\n\nexport interface OverlayData {\n  display: boolean;\n  content?: OverlayContent;\n}\n\nexport enum OverlayContent {\n  EXPLOSION = 1,\n  HISTORY = 2,\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OverlayComponent.html":{"url":"components/OverlayComponent.html","title":"component - OverlayComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OverlayComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/overlay/overlay.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                overlay\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                HistoryComponent\n                            CommonModule\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./overlay.component.html\n            \n\n\n\n            \n                styleUrl\n                ./overlay.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                keyEvent\n                            \n                            \n                                off\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                overlayData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                window:keyup\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    overlayContent\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        overlayData\n                    \n                \n                \n                    \n                        Type :         OverlayData\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/overlay/overlay.component.ts:15\n                            \n                        \n            \n        \n\n\n\n    \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        window:keyup\n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n            \n                \nwindow:keyup(event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        keyEvent\n                        \n                    \n                \n            \n            \n                \n                        \n                    keyEvent(event: KeyboardEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('window:keyup', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        off\n                        \n                    \n                \n            \n            \n                \noff()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/overlay/overlay.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        overlayContent\n                    \n                \n\n                \n                    \n                        getoverlayContent()\n                    \n                \n                            \n                                \n                                    Defined in src/app/overlay/overlay.component.ts:24\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { HistoryComponent } from '../history/history.component';\nimport { CommonModule } from '@angular/common';\nimport { OverlayContent, OverlayData } from '../utils/types';\n\n@Component({\n  selector: 'overlay',\n  standalone: true,\n  imports: [HistoryComponent, CommonModule],\n  templateUrl: './overlay.component.html',\n  styleUrl: './overlay.component.css'\n})\nexport class OverlayComponent {\n\n  @Input() overlayData: OverlayData;\n\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    if (event && event.key === 'Escape') {\n      this.off();\n    }\n  }\n\n  public get overlayContent(): typeof OverlayContent {\n    return OverlayContent; \n  }\n\n  off() {\n    this.overlayData.display = false;\n  }\n\n}\n    \n\n    \n        \n    \n        @if (overlayData.content === overlayContent.HISTORY) {\n            \n        }\n        @else {\n            \n                \n             \n        }\n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            @if (overlayData.content === overlayContent.HISTORY) {                    }        @else {                                                 }    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ClassicalBoardComponent', 'selector': 'classical-board'},{'name': 'GameComponent', 'selector': 'game'},{'name': 'HistoryComponent', 'selector': 'history'},{'name': 'OverlayComponent', 'selector': 'overlay'},{'name': 'TileComponent', 'selector': 'tile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OverlayComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/OverlayData.html":{"url":"interfaces/OverlayData.html","title":"interface - OverlayData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  OverlayData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/utils/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            content\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        content\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        content:         OverlayContent\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         OverlayContent\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type GenerationStrategy = 'AT_FIRST_CLICK' | 'BEFORE_STARTING';\n\nexport enum GameMode {\n  BEGINNER = 'Beginner',\n  INTERMEDIATE = 'Intermediate',\n  EXPERT = 'Expert',\n  CUSTOM = 'Custom',\n}\n\nexport interface NotificationStatus {\n  status: string;\n  flagged: number;\n  time: number;\n}\n\nexport type HistoryRecord = NotificationStatus & {\n  mode: GameMode;\n  date: Date;\n  input?: BoardInput;\n};\n\nexport interface BoardInput {\n  row: number;\n  column: number;\n  mine: number;\n}\n\nexport interface OverlayData {\n  display: boolean;\n  content?: OverlayContent;\n}\n\nexport enum OverlayContent {\n  EXPLOSION = 1,\n  HISTORY = 2,\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageService.html":{"url":"injectables/StorageService.html","title":"injectable - StorageService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/service/storage/storage.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                get\n                            \n                            \n                                getHistory\n                            \n                            \n                                insert\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/storage/storage.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getHistory\n                        \n                    \n                \n            \n            \n                \ngetHistory()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/storage/storage.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Array\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        insert\n                        \n                    \n                \n            \n            \n                \ninsert(record: HistoryRecord)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/storage/storage.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                record\n                                            \n                                                            HistoryRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HistoryRecord } from '../../utils/types';\n\nconst key: string = \"GAME_HISTORY\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  insert(record: HistoryRecord): void {\n    let history: string | null = this.get(key);\n    if (history === null) {\n      localStorage.setItem(key, JSON.stringify(new Array(record)));\n    } else {\n      let historyAsArray = JSON.parse(history);\n      historyAsArray.unshift(record);\n      localStorage.setItem(key, JSON.stringify(historyAsArray));\n    }\n  }\n\n  private get(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  getHistory(): Array {\n    let history: string | null = this.get(key);\n    if (history === null) {\n      return [];\n    } else {\n      return JSON.parse(history);\n    }\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tile.html":{"url":"classes/Tile.html","title":"class - Tile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/tile/tile.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                isFlagged\n                            \n                            \n                                isMine\n                            \n                            \n                                isRevealed\n                            \n                            \n                                neighbors\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getThreatCount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, isMine: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/app/tile/tile.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        isMine\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/app/tile/tile.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFlagged\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/tile/tile.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isMine\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/tile/tile.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isRevealed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/app/tile/tile.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neighbors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tile[]\n\n                    \n                \n                    \n                        \n                                Defined in src/app/tile/tile.ts:11\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getThreatCount\n                        \n                    \n                \n            \n            \n                \ngetThreatCount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/tile/tile.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Tile {\n  // Id of the tile\n  id: number;\n  // Whether or not the tile is revealed\n  isRevealed: boolean;\n  // Whether or not the tile is a mine\n  isMine: boolean;\n  // Whether or not the tile has been flagged as a mine by the player\n  isFlagged: boolean;\n  // the neighboorhood\n  neighbors: Tile[];\n\n  constructor(id: number, isMine: boolean) {\n    this.id = id;\n    this.isMine = isMine;\n    this.isRevealed = false;\n    this.isFlagged = false;\n    this.neighbors = [];\n  }\n\n  getThreatCount(): number {\n    return this.neighbors.filter((tile) => tile.isMine).length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TileComponent.html":{"url":"components/TileComponent.html","title":"component - TileComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TileComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/tile/tile.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                tile\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            NgIf\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./tile.component.html\n            \n\n\n\n            \n                styleUrl\n                ./tile.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                tile\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        tile\n                    \n                \n                \n                    \n                        Type :         Tile\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/tile/tile.component.ts:13\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { NgIf } from '@angular/common';\nimport { Tile } from './tile';\n\n@Component({\n  selector: 'tile',\n  standalone: true,\n  imports: [NgIf],\n  templateUrl: './tile.component.html',\n  styleUrl: './tile.component.css',\n})\nexport class TileComponent {\n  @Input() tile!: Tile;\n}\n\n    \n\n    \n        \n  \n  \n    {{ tile.getThreatCount() > 0 ? tile.getThreatCount() : \"\" }}\n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        {{ tile.getThreatCount() > 0 ? tile.getThreatCount() : \"\" }}    '\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'ClassicalBoardComponent', 'selector': 'classical-board'},{'name': 'GameComponent', 'selector': 'game'},{'name': 'HistoryComponent', 'selector': 'history'},{'name': 'OverlayComponent', 'selector': 'overlay'},{'name': 'TileComponent', 'selector': 'tile'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TileComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TileService.html":{"url":"injectables/TileService.html","title":"injectable - TileService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/service/tile/tile.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                assignMines\n                            \n                            \n                                generateTiles\n                            \n                            \n                                reveal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/service/tile/tile.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        assignMines\n                        \n                    \n                \n            \n            \n                \nassignMines(tiles: Tile[], minesNumber: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/tile/tile.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tiles\n                                            \n                                                            Tile[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                minesNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tile[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateTiles\n                        \n                    \n                \n            \n            \n                \ngenerateTiles(tilesNumber: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/tile/tile.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tilesNumber\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tile[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reveal\n                        \n                    \n                \n            \n            \n                \nreveal(tile: Tile)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/tile/tile.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tile\n                                            \n                                                            Tile\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Tile } from '../../tile/tile';\nimport { Util } from '../../utils/util';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TileService {\n  constructor() {}\n\n  reveal(tile: Tile) {\n    if (tile.isFlagged) return;\n    if (tile.isRevealed) return;\n    tile.isRevealed = true;\n\n    if (tile.isMine) return;\n\n    let threatCount = tile.getThreatCount();\n    if (threatCount == 0) {\n      for (let neighbor of tile.neighbors) {\n        this.reveal(neighbor);\n      }\n    }\n  }\n\n  generateTiles(tilesNumber: number): Tile[] {\n    let tiles: Tile[] = [];\n    for (let i = 0; i  0) {\n      var idxMine = Util.getRandomInt(0, tilesNumber);\n      if (!tiles[idxMine].isMine) {\n        tiles[idxMine].isMine = true;\n        minesNumber--;\n      }\n    }\n    return tiles;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimerService.html":{"url":"injectables/TimerService.html","title":"injectable - TimerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/service/timer/timer.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                counter\n                            \n                            \n                                    Private\n                                running\n                            \n                            \n                                    Public\n                                timerEmitter\n                            \n                            \n                                    Private\n                                timerRef\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/service/timer/timer.service.ts:10\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/timer/timer.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/timer/timer.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stop\n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/service/timer/timer.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        counter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/service/timer/timer.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        running\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/service/timer/timer.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        timerEmitter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/app/service/timer/timer.service.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        timerRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/service/timer/timer.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TimerService {\n  public timerEmitter = new EventEmitter();\n  counter: number = 0;\n  private running: boolean = false;\n  private timerRef: any;\n\n  constructor() {}\n\n  start() {\n    if (this.running) {\n      return;\n    }\n    this.running = true;\n    const emitAndSchedule = () => {\n      this.timerEmitter.emit(this.counter++);\n      this.timerRef = setTimeout(emitAndSchedule, 1000);\n    };\n    emitAndSchedule();\n  }\n\n  stop() {\n    if (this.running) {\n      clearInterval(this.timerRef);\n    }\n  }\n\n  clear() {\n    this.running = false;\n    this.counter = 0;\n    this.timerEmitter.emit(this.counter);\n    clearInterval(this.timerRef);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Util.html":{"url":"classes/Util.html","title":"class - Util","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Util\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/utils/util.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getRandomInt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getRandomInt\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRandomInt(min: number, max: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/utils/util.ts:2\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                min\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                max\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Util {\n  static getRandomInt(min: number, max: number): number {\n    const minCeiled = Math.ceil(min);\n    const maxFloored = Math.floor(max);\n    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled); // The maximum is exclusive and the minimum is inclusive\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/board/board.ts\n            \n            class\n            Board\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/board/classical-board/classical-board.component.ts\n            \n            component\n            ClassicalBoardComponent\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app/board/classical-board/classical-board.ts\n            \n            class\n            ClassicalBoard\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/game/game.component.ts\n            \n            component\n            GameComponent\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/history/history.component.ts\n            \n            component\n            HistoryComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/overlay/overlay.component.ts\n            \n            component\n            OverlayComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/service/classical-board/classical-board.service.ts\n            \n            injectable\n            ClassicalBoardService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/service/confetti/confetti.service.ts\n            \n            injectable\n            ConfettiService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/service/storage/storage.service.ts\n            \n            injectable\n            StorageService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/service/storage/storage.service.ts\n            \n            variable\n            key\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/service/tile/tile.service.ts\n            \n            injectable\n            TileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/service/timer/timer.service.ts\n            \n            injectable\n            TimerService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/tile/tile.component.ts\n            \n            component\n            TileComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/tile/tile.ts\n            \n            class\n            Tile\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/utils/types.ts\n            \n            interface\n            BoardInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/utils/types.ts\n            \n            interface\n            NotificationStatus\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/utils/types.ts\n            \n            interface\n            OverlayData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/utils/util.ts\n            \n            class\n            Util\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.2.2\n        \n            @angular/common : ^18.2.2\n        \n            @angular/compiler : ^18.2.2\n        \n            @angular/core : ^18.2.2\n        \n            @angular/forms : ^18.2.2\n        \n            @angular/platform-browser : ^18.2.2\n        \n            @angular/platform-browser-dynamic : ^18.2.2\n        \n            @angular/router : ^18.2.2\n        \n            animate.css : ^4.1.1\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            tsparticles-confetti : ^2.12.0\n        \n            zone.js : ~0.14.10\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GameMode   (src/.../types.ts)\n                        \n                        \n                            OverlayContent   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/utils/types.ts\n    \n        \n            \n                \n                    \n                        \n                        GameMode\n                    \n                \n                        \n                            \n                                 BEGINNER\n                            \n                        \n                        \n                            \n                                Value : Beginner\n                            \n                        \n                        \n                            \n                                 INTERMEDIATE\n                            \n                        \n                        \n                            \n                                Value : Intermediate\n                            \n                        \n                        \n                            \n                                 EXPERT\n                            \n                        \n                        \n                            \n                                Value : Expert\n                            \n                        \n                        \n                            \n                                 CUSTOM\n                            \n                        \n                        \n                            \n                                Value : Custom\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        OverlayContent\n                    \n                \n                        \n                            \n                                 EXPLOSION\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 HISTORY\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nMinesweeperGeektortoise\nThis project was generated with Angular CLI version 17.3.6.\nDevelopment server\nRun ng serve for a dev server. Navigate to http://localhost:4200/. The application will automatically reload if you change any of the source files.\nCode scaffolding\nRun ng generate component component-name to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module.\nBuild\nRun ng build to build the project. The build artifacts will be stored in the dist/ directory.\nRunning unit tests\nRun ng test to execute the unit tests via Karma.\nRunning end-to-end tests\nRun ng e2e to execute the end-to-end tests via a platform of your choice. To use this command, you need to first add a package that implements end-to-end testing capabilities.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    6 Components\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GenerationStrategy   (src/.../types.ts)\n                        \n                        \n                            HistoryRecord   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/utils/types.ts\n    \n    \n        \n            \n                \n                    \n                    GenerationStrategy\n                \n            \n            \n                \n                        \"AT_FIRST_CLICK\" | \"BEFORE_STARTING\"\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HistoryRecord\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                        \n                            key   (src/.../storage.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [provideRouter(routes)],\n}\n                    \n                \n\n\n        \n    \n\n    src/app/service/storage/storage.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GAME_HISTORY\"\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
